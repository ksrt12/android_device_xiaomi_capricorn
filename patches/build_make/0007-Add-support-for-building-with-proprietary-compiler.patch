From 3a77fc849a0a81b9f3abe3e06ee98aa2248618ca Mon Sep 17 00:00:00 2001
From: Pengxuan Zheng <pzheng@codeaurora.org>
Date: Fri, 8 Dec 2017 16:24:50 -0800
Subject: [PATCH 07/19] Add support for building with proprietary compiler

Change-Id: I52ee6bc413dab2bf25338b8f586c29a3fe34430b
Signed-off-by: Joe Maples <joe@frap129.org>
---
 core/binary.mk            | 31 +++++++++++++++++++++++++++++++
 core/clear_vars.mk        |  5 +++++
 core/config_sanitizers.mk |  5 +++++
 core/definitions.mk       |  6 ++++++
 core/executable.mk        | 20 ++++++++++++++++++++
 core/shared_library.mk    | 20 ++++++++++++++++++++
 core/static_library.mk    | 20 ++++++++++++++++++++
 7 files changed, 107 insertions(+)

diff --git a/core/binary.mk b/core/binary.mk
index f65e97444..4da0db9eb 100644
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -383,6 +383,21 @@ else ifeq ($(my_clang),)
     my_clang := true
 endif
 
+my_sdclang := $(strip $(LOCAL_SDCLANG))
+my_sdclang_2 := $(strip $(LOCAL_SDCLANG_2))
+ifeq ($(my_sdclang),true)
+    ifeq ($(my_sdclang_2),true)
+        $(error LOCAL_SDCLANG and LOCAL_SDCLANG_2 can not be set to true at the same time!)
+    endif
+endif
+ifeq ($(SDCLANG),true)
+    ifeq ($(my_sdclang),)
+        ifneq ($(my_sdclang_2),true)
+            my_sdclang := true
+        endif
+    endif
+endif
+
 ifeq ($(LOCAL_C_STD),)
     my_c_std_version := $(DEFAULT_C_STD_VERSION)
 else ifeq ($(LOCAL_C_STD),experimental)
@@ -537,6 +552,22 @@ my_target_global_cflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_$(my_prefix)GLOBA
 my_target_global_conlyflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_$(my_prefix)GLOBAL_CONLYFLAGS) $(my_c_std_conlyflags)
 my_target_global_cppflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_$(my_prefix)GLOBAL_CPPFLAGS) $(my_cpp_std_cppflags)
 my_target_global_ldflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_$(my_prefix)GLOBAL_LDFLAGS)
+ifeq ($(my_sdclang),true)
+    ifeq ($(strip $(my_cc)),)
+        my_cc := $(SDCLANG_PATH)/clang
+    endif
+    ifeq ($(strip $(my_cxx)),)
+        my_cxx := $(SDCLANG_PATH)/clang++
+    endif
+endif
+ifeq ($(my_sdclang_2),true)
+    ifeq ($(strip $(my_cc)),)
+        my_cc := $(SDCLANG_PATH_2)/clang
+    endif
+    ifeq ($(strip $(my_cxx)),)
+        my_cxx := $(SDCLANG_PATH_2)/clang++
+    endif
+endif
 else
 my_target_global_cflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)$(my_prefix)GLOBAL_CFLAGS)
 my_target_global_conlyflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)$(my_prefix)GLOBAL_CONLYFLAGS) $(my_c_std_conlyflags)
diff --git a/core/clear_vars.mk b/core/clear_vars.mk
index 8375d5180..6adef9649 100644
--- a/core/clear_vars.mk
+++ b/core/clear_vars.mk
@@ -443,6 +443,11 @@ LOCAL_MODULE_STEM_32:=
 LOCAL_MODULE_STEM_64:=
 LOCAL_MODULE_SYMLINKS_32:=
 LOCAL_MODULE_SYMLINKS_64:=
+LOCAL_SDCLANG:=
+LOCAL_SDCLANG_2:=
+LOCAL_SDCLANG_EXTRA_FLAGS_32:=
+LOCAL_SDCLANG_EXTRA_FLAGS_64:=
+LOCAL_SDCLANG_LTO:=
 LOCAL_SHARED_LIBRARIES_32:=
 LOCAL_SHARED_LIBRARIES_64:=
 LOCAL_SRC_FILES_32:=
diff --git a/core/config_sanitizers.mk b/core/config_sanitizers.mk
index 6d2ecbbca..2650102dc 100644
--- a/core/config_sanitizers.mk
+++ b/core/config_sanitizers.mk
@@ -285,6 +285,11 @@ ifneq ($(filter cfi,$(my_sanitize)),)
         my_ldflags += -Wl,--version-script,build/soong/cc/config/cfi_exports.map
         LOCAL_ADDITIONAL_DEPENDENCIES += build/soong/cc/config/cfi_exports.map
   endif
+  ifneq ($(filter true,$(my_sdclang) $(my_sdclang2)),)
+    my_ldflags := $(filter-out -Wl,-plugin-opt,O1 -Wl,-m,aarch64_elf64_le_vec,$(my_ldflags))
+    my_cflags += -fuse-ld=qcld
+    my_ldflags += -fuse-ld=qcld
+  endif
 endif
 
 # If local or global modules need ASAN, add linker flags.
diff --git a/core/definitions.mk b/core/definitions.mk
index 5f35def05..8c3405ddd 100644
--- a/core/definitions.mk
+++ b/core/definitions.mk
@@ -1255,6 +1255,8 @@ define transform-cpp-to-o
 $(if $(PRIVATE_TIDY_CHECKS),$(clang-tidy-cpp))
 $(hide) $(RELATIVE_PWD) $(PRIVATE_CXX) \
   $(transform-cpp-to-o-compiler-args) \
+  $(if $(findstring $(SDCLANG_PATH),$(PRIVATE_CXX)),$(SDCLANG_COMMON_FLAGS)) \
+  $(if $(findstring $(SDCLANG_PATH_2),$(PRIVATE_CXX)),$(SDCLANG_COMMON_FLAGS_2)) \
   -MD -MF $(patsubst %.o,%.d,$@) -o $@ $<
 endef
 endif
@@ -1303,6 +1305,8 @@ define transform-c-to-o
 $(if $(PRIVATE_TIDY_CHECKS),$(clang-tidy-c))
 $(hide) $(RELATIVE_PWD) $(PRIVATE_CC) \
   $(transform-c-to-o-compiler-args) \
+  $(if $(findstring $(SDCLANG_PATH),$(PRIVATE_CC)),$(SDCLANG_COMMON_FLAGS)) \
+  $(if $(findstring $(SDCLANG_PATH_2),$(PRIVATE_CC)),$(SDCLANG_COMMON_FLAGS_2)) \
   -MD -MF $(patsubst %.o,%.d,$@) -o $@ $<
 endef
 endif
@@ -1312,6 +1316,8 @@ define transform-s-to-o
 @mkdir -p $(dir $@)
 $(RELATIVE_PWD) $(PRIVATE_CC) \
   $(call transform-c-or-s-to-o-compiler-args, $(PRIVATE_ASFLAGS)) \
+  $(if $(findstring $(SDCLANG_PATH),$(PRIVATE_CC)),$(SDCLANG_COMMON_FLAGS)) \
+  $(if $(findstring $(SDCLANG_PATH_2),$(PRIVATE_CC)),$(SDCLANG_COMMON_FLAGS_2)) \
   -MD -MF $(patsubst %.o,%.d,$@) -o $@ $<
 endef
 
diff --git a/core/executable.mk b/core/executable.mk
index f1b2462e4..c024f22cf 100644
--- a/core/executable.mk
+++ b/core/executable.mk
@@ -54,6 +54,14 @@ endif
 
 my_skip_non_preferred_arch :=
 
+ifeq ($(LOCAL_SDCLANG),true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
+ifeq ($(LOCAL_SDCLANG_2),true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
 # check if preferred arch is supported
 include $(BUILD_SYSTEM)/module_arch_supported.mk
 ifeq ($(my_module_arch_supported),true)
@@ -92,4 +100,16 @@ LOCAL_NO_2ND_ARCH_MODULE_SUFFIX :=
 
 my_module_arch_supported :=
 
+ifeq ($(LOCAL_SDCLANG),true)
+ifeq ($(LOCAL_SDCLANG_LTO),true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
+ifeq ($(LOCAL_SDCLANG_2),true)
+ifeq ($(LOCAL_SDCLANG_LTO),true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
 endif
diff --git a/core/shared_library.mk b/core/shared_library.mk
index a15b1a6ea..98cf85480 100644
--- a/core/shared_library.mk
+++ b/core/shared_library.mk
@@ -22,6 +22,14 @@ endif
 endif # my_module_multilib == both
 
 
+ifeq ($(LOCAL_SDCLANG),true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
+ifeq ($(LOCAL_SDCLANG_2),true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
 LOCAL_2ND_ARCH_VAR_PREFIX :=
 include $(BUILD_SYSTEM)/module_arch_supported.mk
 
@@ -49,6 +57,18 @@ LOCAL_2ND_ARCH_VAR_PREFIX :=
 
 endif # TARGET_2ND_ARCH
 
+ifeq ($(LOCAL_SDCLANG),true)
+ifeq ($(LOCAL_SDCLANG_LTO),true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
+ifeq ($(LOCAL_SDCLANG_2),true)
+ifeq ($(LOCAL_SDCLANG_LTO),true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
 my_module_arch_supported :=
 
 ###########################################################
diff --git a/core/static_library.mk b/core/static_library.mk
index 25e527964..ccdcfcc74 100644
--- a/core/static_library.mk
+++ b/core/static_library.mk
@@ -7,6 +7,14 @@ ifndef my_module_multilib
 my_module_multilib := both
 endif
 
+ifeq ($(LOCAL_SDCLANG),true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
+ifeq ($(LOCAL_SDCLANG_2),true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
 LOCAL_2ND_ARCH_VAR_PREFIX :=
 include $(BUILD_SYSTEM)/module_arch_supported.mk
 
@@ -34,6 +42,18 @@ LOCAL_2ND_ARCH_VAR_PREFIX :=
 
 endif # TARGET_2ND_ARCH
 
+ifeq ($(LOCAL_SDCLANG),true)
+ifeq ($(LOCAL_SDCLANG_LTO),true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
+ifeq ($(LOCAL_SDCLANG_2),true)
+ifeq ($(LOCAL_SDCLANG_LTO),true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
 my_module_arch_supported :=
 
 ###########################################################
-- 
2.19.1

