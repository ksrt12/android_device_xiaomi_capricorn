From 4b85ab2c5b02c85e704b9c7ae13296ab6fcb95d9 Mon Sep 17 00:00:00 2001
From: Alex Naidis <alex.naidis@linux.com>
Date: Sat, 1 Oct 2016 17:52:14 +0200
Subject: [PATCH 11/19] build: Add support for selective LTO with QCLD

This patch adjusts the current SDCLANG support
with selective LTO and QCLD support.

QCLD is Qualcomm's proprietary linker which
includes major improvements for LTO.

With the current implementation LTO and QCLD
can be enabled together and it is impossible
to enable one without the other.
This is because that's the most benefitial
configuration.

Since SDCLANG bundles QCLD, using
QCLD without enabling SDCLANG globally
is blocked.

On static libraries the LTO flags
don't get applied, the control file
living in device/qcom/common/sdclang/
has special handling for this.

Global builds with this are not possible
at the current state, since QCLD misses
certain functionalities gold offers and
some targets depend on these functionalities.
To enable this all a target has to do
is setting LOCAL_SDCLANG_LTO to true in its makefile.

Flags which are incompatible with QCLD get
filtered by including the variable SDCLANG_LTO_DEFS .
Check device/qcom/common for more details.

Contributors:
@TheCrazyLex
@xboxfanj

Change-Id: Ib189d3b983a3fd78ef5bd5ab9fc1ff1351a506f4
Signed-off-by: Alex Naidis <alex.naidis@linux.com>
Signed-off-by: Joe Maples <joe@frap129.org>
---
 core/binary.mk         | 6 ++++++
 core/executable.mk     | 4 ++--
 core/shared_library.mk | 4 ++--
 core/static_library.mk | 4 ++--
 4 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/core/binary.mk b/core/binary.mk
index 5ad863e2e..ea2f8e152 100644
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -548,6 +548,12 @@ my_target_global_ldflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_$(my_prefix)GLOB
     ifeq ($(my_sdclang),true)
         SDCLANG_PRECONFIGURED_FLAGS := -Wno-vectorizer-no-neon
 
+        ifeq ($(LOCAL_SDCLANG_LTO), true)
+        ifneq ($(LOCAL_MODULE_CLASS), STATIC_LIBRARIES)
+            SDCLANG_PRECONFIGURED_FLAGS += -flto
+            my_target_global_ldflags += -fuse-ld=qcld -flto
+        endif
+        endif
         my_target_global_cflags += $(SDCLANG_COMMON_FLAGS) $(SDCLANG_PRECONFIGURED_FLAGS)
         my_target_global_conlyflags += $(SDCLANG_COMMON_FLAGS) $(SDCLANG_PRECONFIGURED_FLAGS)
         my_target_global_cppflags += $(SDCLANG_COMMON_FLAGS) $(SDCLANG_PRECONFIGURED_FLAGS)
diff --git a/core/executable.mk b/core/executable.mk
index 457a9e2a0..bf45b9628 100644
--- a/core/executable.mk
+++ b/core/executable.mk
@@ -92,8 +92,8 @@ LOCAL_NO_2ND_ARCH_MODULE_SUFFIX :=
 
 my_module_arch_supported :=
 
-ifeq ($(LOCAL_SDCLANG),true)
-ifeq ($(LOCAL_SDCLANG_LTO),true)
+ifeq ($(SDCLANG), true)
+ifeq ($(LOCAL_SDCLANG_LTO), true)
 include $(SDCLANG_LTO_DEFS)
 endif
 endif
diff --git a/core/shared_library.mk b/core/shared_library.mk
index 4f4b9e7b4..ccf585dbf 100644
--- a/core/shared_library.mk
+++ b/core/shared_library.mk
@@ -48,8 +48,8 @@ LOCAL_2ND_ARCH_VAR_PREFIX :=
 
 endif # TARGET_2ND_ARCH
 
-ifeq ($(LOCAL_SDCLANG),true)
-ifeq ($(LOCAL_SDCLANG_LTO),true)
+ifeq ($(SDCLANG), true)
+ifeq ($(LOCAL_SDCLANG_LTO), true)
 include $(SDCLANG_LTO_DEFS)
 endif
 endif
diff --git a/core/static_library.mk b/core/static_library.mk
index a6d1a065e..06cece81e 100644
--- a/core/static_library.mk
+++ b/core/static_library.mk
@@ -34,8 +34,8 @@ LOCAL_2ND_ARCH_VAR_PREFIX :=
 
 endif # TARGET_2ND_ARCH
 
-ifeq ($(LOCAL_SDCLANG),true)
-ifeq ($(LOCAL_SDCLANG_LTO),true)
+ifeq ($(SDCLANG), true)
+ifeq ($(LOCAL_SDCLANG_LTO), true)
 include $(SDCLANG_LTO_DEFS)
 endif
 endif
-- 
2.19.1

