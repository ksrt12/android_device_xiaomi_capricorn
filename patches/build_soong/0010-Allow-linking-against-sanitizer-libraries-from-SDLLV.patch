From 818f3da3d3f1fedaa71f948481d4bae5de054fa3 Mon Sep 17 00:00:00 2001
From: Pengxuan Zheng <pzheng@codeaurora.org>
Date: Tue, 31 Jul 2018 16:52:44 -0700
Subject: [PATCH 10/17] Allow linking against sanitizer libraries from SDLLVM

This patch adds support to enable Android builds to link against sanitizer
libraries from SDLLVM if the compiler used is SDLLVM.

Change-Id: If41c65d7ad86a3f81a0efb2f7b11437ac526047f
CRs-Fixed: 2260978
Signed-off-by: Joe Maples <joe@frap129.org>
---
 cc/config/global.go | 21 +++++++++++++++++++++
 cc/sanitize.go      | 16 +++++++++++++---
 2 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/cc/config/global.go b/cc/config/global.go
index e06a8a11..d38a3911 100644
--- a/cc/config/global.go
+++ b/cc/config/global.go
@@ -17,8 +17,10 @@ package config
 import (
 	"encoding/json"
 	"fmt"
+	"io/ioutil"
 	"os"
 	"path"
+	"path/filepath"
 	"runtime"
 	"strconv"
 	"strings"
@@ -394,6 +396,25 @@ func setSdclangVars() {
 		}
 		return sdclangAEFlag + " " + sdclangFlags2
 	})
+
+	// Find the path to SDLLVM's ASan libraries
+	absPath := sdclangPath
+	if envPath := android.SdclangEnv["SDCLANG_PATH"]; envPath != "" {
+		absPath = envPath
+	}
+	if !filepath.IsAbs(absPath) {
+		absPath = path.Join(androidRoot, absPath)
+	}
+
+	libDir, err := ioutil.ReadDir(path.Join(absPath, "../lib/clang"))
+	if err != nil {
+		panic(err)
+	}
+	if len(libDir) != 1 || !libDir[0].IsDir() {
+		panic("Failed to find sanitizer libraries")
+	}
+
+	pctx.StaticVariable("SDClangAsanLibDir", path.Join(absPath, "../lib/clang", libDir[0].Name(), "lib/linux"))
 }
 
 var HostPrebuiltTag = pctx.VariableConfigMethod("HostPrebuiltTag", android.Config.PrebuiltOS)
diff --git a/cc/sanitize.go b/cc/sanitize.go
index ae6626dd..bfdbcbc2 100644
--- a/cc/sanitize.go
+++ b/cc/sanitize.go
@@ -308,6 +308,9 @@ func (sanitize *sanitize) deps(ctx BaseModuleContext, deps Deps) Deps {
 func (sanitize *sanitize) flags(ctx ModuleContext, flags Flags) Flags {
 	minimalRuntimeLib := config.UndefinedBehaviorSanitizerMinimalRuntimeLibrary(ctx.toolchain()) + ".a"
 	minimalRuntimePath := "${config.ClangAsanLibDir}/" + minimalRuntimeLib
+	if flags.Sdclang {
+		minimalRuntimePath = "${config.SDClangAsanLibDir}/" + minimalRuntimeLib
+	}
 
 	if ctx.Device() && sanitize.Properties.MinimalRuntimeDep {
 		flags.LdFlags = append(flags.LdFlags, minimalRuntimePath)
@@ -493,9 +496,16 @@ func (sanitize *sanitize) flags(ctx ModuleContext, flags Flags) Flags {
 
 	if runtimeLibrary != "" {
 		// ASan runtime library must be the first in the link order.
-		flags.libFlags = append([]string{
-			"${config.ClangAsanLibDir}/" + runtimeLibrary + ctx.toolchain().ShlibSuffix(),
-		}, flags.libFlags...)
+		if flags.Sdclang {
+			flags.libFlags = append([]string{
+				"${config.SDClangAsanLibDir}/" + runtimeLibrary + ctx.toolchain().ShlibSuffix(),
+			}, flags.libFlags...)
+		} else {
+			flags.libFlags = append([]string{
+				"${config.ClangAsanLibDir}/" + runtimeLibrary + ctx.toolchain().ShlibSuffix(),
+			}, flags.libFlags...)
+		}
+
 		sanitize.runtimeLibrary = runtimeLibrary
 
 		// When linking against VNDK, use the vendor variant of the runtime lib
-- 
2.19.1

