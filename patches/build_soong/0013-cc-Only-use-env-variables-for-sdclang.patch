From b265e90dd8be443309a2df27a33269d7fa7064ac Mon Sep 17 00:00:00 2001
From: Joe Maples <joe@frap129.org>
Date: Mon, 27 Aug 2018 10:28:13 -0400
Subject: [PATCH 13/17] cc: Only use env variables for sdclang

We don't need the json setup, everything can be put in vendorsetup.sh

Change-Id: I569cf46b17e8e1d40d08d5da734556a86ffc527a
Signed-off-by: Joe Maples <joe@frap129.org>
---
 cc/config/global.go | 230 ++++++++++----------------------------------
 1 file changed, 49 insertions(+), 181 deletions(-)

diff --git a/cc/config/global.go b/cc/config/global.go
index debacb67..16f5dfe5 100644
--- a/cc/config/global.go
+++ b/cc/config/global.go
@@ -15,12 +15,9 @@
 package config
 
 import (
-	"encoding/json"
 	"fmt"
 	"io/ioutil"
-	"os"
 	"path"
-	"path/filepath"
 	"runtime"
 	"strconv"
 	"strings"
@@ -187,7 +184,55 @@ func init() {
 	pctx.PrefixedExistentPathsForSourcesVariable("CommonNativehelperInclude", "-I",
 		[]string{"libnativehelper/include_jni"})
 
-	setSdclangVars()
+	// Override SDCLANG if the varialbe is set in the environment
+	if sdclang := android.SdclangEnv["SDCLANG"]; sdclang != "" {
+		if override, err := strconv.ParseBool(sdclang); err == nil {
+			SDClang = override
+		}
+	}
+
+	pctx.VariableFunc("SDClangBin", func(ctx android.PackageVarContext) string {
+		if override := ctx.Config().Getenv("SDCLANG_PATH"); override != "" {
+			return override
+		}
+		return "${ClangBin}/"
+	})
+	pctx.VariableFunc("SDClangBin2", func(ctx android.PackageVarContext) string {
+		if override := ctx.Config().Getenv("SDCLANG_PATH_2"); override != "" {
+			return override
+		}
+		return "${ClangBin}/"
+	})
+	pctx.VariableFunc("SDClangFlags", func(ctx android.PackageVarContext) string {
+		if override := ctx.Config().Getenv("SDCLANG_COMMON_FLAGS"); override != "" {
+			return override
+		}
+		return ""
+	})
+	pctx.VariableFunc("SDClangFlags2", func(ctx android.PackageVarContext) string {
+		if override := ctx.Config().Getenv("SDCLANG_COMMON_FLAGS_2"); override != "" {
+			return override
+		}
+		return ""
+	})
+
+	// Find the path to SDLLVM's ASan libraries
+	var absPath string
+	absPath  = "${SDClangBin}/"
+
+	libDir, err := ioutil.ReadDir(path.Join(absPath, "../lib/clang"))
+	if err != nil {
+		print(err)
+	}
+
+	if len(libDir) > 0 {
+		if len(libDir) < 1 || !libDir[0].IsDir() {
+			print("Failed to find sanitizer libraries")
+		}
+		pctx.StaticVariable("SDClangAsanLibDir", path.Join(absPath, "../lib/clang", libDir[0].Name(), "lib/linux"))
+	} else {
+		pctx.StaticVariable("SDClangAsanLibDir", "${SDClangBin}/../lib/clang/*/lib/linux")
+	}
 
 	pctx.SourcePathVariable("ClangDefaultBase", ClangDefaultBase)
 	pctx.VariableFunc("ClangBase", func(ctx android.PackageVarContext) string {
@@ -261,183 +306,6 @@ func init() {
 	})
 }
 
-func setSdclangVars() {
-	sdclangPath := ""
-	sdclangPath2 := ""
-	sdclangAEFlag := ""
-	sdclangFlags := ""
-	sdclangFlags2 := ""
-
-	product := android.SdclangEnv["TARGET_PRODUCT"]
-	androidRoot := android.SdclangEnv["ANDROID_BUILD_TOP"]
-	aeConfigPath := android.SdclangEnv["SDCLANG_AE_CONFIG"]
-	sdclangConfigPath := android.SdclangEnv["SDCLANG_CONFIG"]
-	sdclangSA := android.SdclangEnv["SDCLANG_SA_ENABLED"]
-
-	type sdclangAEConfig struct {
-		SDCLANG_AE_FLAG string
-	}
-
-	// Load AE config file and set AE flag
-	aeConfigFile := path.Join(androidRoot, aeConfigPath)
-	if file, err := os.Open(aeConfigFile); err == nil {
-		decoder := json.NewDecoder(file)
-		aeConfig := sdclangAEConfig{}
-		if err := decoder.Decode(&aeConfig); err == nil {
-			sdclangAEFlag = aeConfig.SDCLANG_AE_FLAG
-		} else {
-			panic(err)
-		}
-	}
-
-	// Load SD Clang config file and set SD Clang variables
-	sdclangConfigFile := path.Join(androidRoot, sdclangConfigPath)
-	var sdclangConfig interface{}
-	if file, err := os.Open(sdclangConfigFile); err == nil {
-		decoder := json.NewDecoder(file)
-                // Parse the config file
-		if err := decoder.Decode(&sdclangConfig); err == nil {
-			config := sdclangConfig.(map[string]interface{})
-			// Retrieve the default block
-			if dev, ok := config["default"]; ok {
-				devConfig := dev.(map[string]interface{})
-				// SDCLANG is optional in the default block
-				if _, ok := devConfig["SDCLANG"]; ok {
-					SDClang = devConfig["SDCLANG"].(bool)
-				}
-				// SDCLANG_PATH is required in the default block
-				if _, ok := devConfig["SDCLANG_PATH"]; ok {
-					sdclangPath = devConfig["SDCLANG_PATH"].(string)
-				} else {
-					panic("SDCLANG_PATH is required in the default block")
-				}
-				// SDCLANG_PATH_2 is required in the default block
-				if _, ok := devConfig["SDCLANG_PATH_2"]; ok {
-					sdclangPath2 = devConfig["SDCLANG_PATH_2"].(string)
-				} else {
-					panic("SDCLANG_PATH_2 is required in the default block")
-				}
-				// SDCLANG_FLAGS is optional in the default block
-				if _, ok := devConfig["SDCLANG_FLAGS"]; ok {
-					sdclangFlags = devConfig["SDCLANG_FLAGS"].(string)
-				}
-				// SDCLANG_FLAGS_2 is optional in the default block
-				if _, ok := devConfig["SDCLANG_FLAGS_2"]; ok {
-					sdclangFlags2 = devConfig["SDCLANG_FLAGS_2"].(string)
-				}
-			} else {
-				panic("Default block is required in the SD Clang config file")
-			}
-			// Retrieve the device specific block if it exists in the config file
-			if dev, ok := config[product]; ok {
-				devConfig := dev.(map[string]interface{})
-				// SDCLANG is optional in the device specific block
-				if _, ok := devConfig["SDCLANG"]; ok {
-					SDClang = devConfig["SDCLANG"].(bool)
-				}
-				// SDCLANG_PATH is optional in the device specific block
-				if _, ok := devConfig["SDCLANG_PATH"]; ok {
-					sdclangPath = devConfig["SDCLANG_PATH"].(string)
-				}
-				// SDCLANG_PATH_2 is optional in the device specific block
-				if _, ok := devConfig["SDCLANG_PATH_2"]; ok {
-					sdclangPath2 = devConfig["SDCLANG_PATH_2"].(string)
-				}
-				// SDCLANG_FLAGS is optional in the device specific block
-				if _, ok := devConfig["SDCLANG_FLAGS"]; ok {
-					sdclangFlags = devConfig["SDCLANG_FLAGS"].(string)
-				}
-				// SDCLANG_FLAGS_2 is optional in the device specific block
-				if _, ok := devConfig["SDCLANG_FLAGS_2"]; ok {
-					sdclangFlags2 = devConfig["SDCLANG_FLAGS_2"].(string)
-				}
-			}
-			b, _ := strconv.ParseBool(sdclangSA)
-			if(b) {
-				androidroot_llvm := []string{androidRoot, "llvmsa"}
-				llvmsa_loc := strings.Join(androidroot_llvm, "/")
-				s := []string{sdclangFlags, "--compile-and-analyze", llvmsa_loc}
-				sdclangFlags = strings.Join(s, " ")
-				fmt.Println("Clang SA is enabled: ", sdclangFlags)
-			} else {
-				fmt.Println("Clang SA is not enabled")
-			}
-		} else {
-			panic(err)
-		}
-	} else {
-		fmt.Println(err)
-	}
-
-	// Override SDCLANG if the varialbe is set in the environment
-	if sdclang := android.SdclangEnv["SDCLANG"]; sdclang != "" {
-		if override, err := strconv.ParseBool(sdclang); err == nil {
-			SDClang = override
-		}
-	}
-
-	// Sanity check SDCLANG_PATH
-	if envPath := android.SdclangEnv["SDCLANG_PATH"]; sdclangPath == "" && envPath == "" {
-		panic("SDCLANG_PATH can not be empty")
-	}
-
-	// Sanity check SDCLANG_PATH_2
-	if envPath := android.SdclangEnv["SDCLANG_PATH_2"]; sdclangPath2 == "" && envPath == "" {
-		panic("SDCLANG_PATH_2 can not be empty")
-	}
-
-	// Override SDCLANG_PATH if the variable is set in the environment
-	pctx.VariableFunc("SDClangBin", func(ctx android.PackageVarContext) string {
-		if override := ctx.Config().Getenv("SDCLANG_PATH"); override != "" {
-			return override
-		}
-		return sdclangPath
-	})
-
-	// Override SDCLANG_PATH_2 if the variable is set in the environment
-	pctx.VariableFunc("SDClangBin2", func(ctx android.PackageVarContext) string {
-		if override := ctx.Config().Getenv("SDCLANG_PATH_2"); override != "" {
-			return override
-		}
-		return sdclangPath2
-	})
-
-	// Override SDCLANG_COMMON_FLAGS if the variable is set in the environment
-	pctx.VariableFunc("SDClangFlags", func(ctx android.PackageVarContext) string {
-		if override := ctx.Config().Getenv("SDCLANG_COMMON_FLAGS"); override != "" {
-			return override
-		}
-		return sdclangAEFlag + " " + sdclangFlags
-	})
-
-	// Override SDCLANG_COMMON_FLAGS_2 if the variable is set in the environment
-	pctx.VariableFunc("SDClangFlags2", func(ctx android.PackageVarContext) string {
-		if override := ctx.Config().Getenv("SDCLANG_COMMON_FLAGS_2"); override != "" {
-			return override
-		}
-		return sdclangAEFlag + " " + sdclangFlags2
-	})
-
-	// Find the path to SDLLVM's ASan libraries
-	absPath := sdclangPath
-	if envPath := android.SdclangEnv["SDCLANG_PATH"]; envPath != "" {
-		absPath = envPath
-	}
-	if !filepath.IsAbs(absPath) {
-		absPath = path.Join(androidRoot, absPath)
-	}
-
-	libDir, err := ioutil.ReadDir(path.Join(absPath, "../lib/clang"))
-	if err != nil {
-		panic(err)
-	}
-	if len(libDir) != 1 || !libDir[0].IsDir() {
-		panic("Failed to find sanitizer libraries")
-	}
-
-	pctx.StaticVariable("SDClangAsanLibDir", path.Join(absPath, "../lib/clang", libDir[0].Name(), "lib/linux"))
-}
-
 var HostPrebuiltTag = pctx.VariableConfigMethod("HostPrebuiltTag", android.Config.PrebuiltOS)
 
 func bionicHeaders(kernelArch string) string {
-- 
2.19.1

