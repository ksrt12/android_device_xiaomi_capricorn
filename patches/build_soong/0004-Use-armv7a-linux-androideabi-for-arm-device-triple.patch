From 6a6452c2b0af06d979bef38b0de5f7d5cba12337 Mon Sep 17 00:00:00 2001
From: Chih-Hung Hsieh <chh@google.com>
Date: Thu, 15 Mar 2018 18:44:57 -0700
Subject: [PATCH 04/17] Use armv7a-linux-androideabi for arm device triple

* This is a workaround of llvm LTO bug.
* Keep using current NDK include directory path.
  NDKTriple is default ClangTriple but kept as GccTriple for arm device.

Bug: 72619014
Test: make checkbuild
Change-Id: I5dc63c99760325c60bc2da98fd6a3125cef7267d
Signed-off-by: mydongistiny <jaysonedson@gmail.com>
Signed-off-by: Joe Maples <joe@frap129.org>
---
 cc/compiler.go          |  2 +-
 cc/config/arm_device.go |  6 ++++++
 cc/config/toolchain.go  | 15 +++++++++++++++
 cc/makevars.go          |  2 +-
 4 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/cc/compiler.go b/cc/compiler.go
index 1b0eb4e3..2ba19f1b 100644
--- a/cc/compiler.go
+++ b/cc/compiler.go
@@ -286,7 +286,7 @@ func (compiler *baseCompiler) compilerFlags(ctx ModuleContext, flags Flags, deps
 		// behavior here, and the NDK always has all the NDK headers available.
 		flags.SystemIncludeFlags = append(flags.SystemIncludeFlags,
 			"-isystem "+getCurrentIncludePath(ctx).String(),
-			"-isystem "+getCurrentIncludePath(ctx).Join(ctx, tc.ClangTriple()).String())
+			"-isystem "+getCurrentIncludePath(ctx).Join(ctx, config.NDKTriple(tc)).String())
 
 		// Traditionally this has come from android/api-level.h, but with the
 		// libc headers unified it must be set by the build system since we
diff --git a/cc/config/arm_device.go b/cc/config/arm_device.go
index fa8d1147..c85a7f6c 100644
--- a/cc/config/arm_device.go
+++ b/cc/config/arm_device.go
@@ -352,6 +352,12 @@ func (t *toolchainArm) InstructionSetFlags(isa string) (string, error) {
 }
 
 func (t *toolchainArm) ClangTriple() string {
+	// http://b/72619014 work around llvm LTO bug.
+	return "armv7a-linux-androideabi"
+}
+
+func (t *toolchainArm) ndkTriple() string {
+	// Use current NDK include path, while ClangTriple is changed.
 	return t.GccTriple()
 }
 
diff --git a/cc/config/toolchain.go b/cc/config/toolchain.go
index 279ceef0..7961575f 100644
--- a/cc/config/toolchain.go
+++ b/cc/config/toolchain.go
@@ -68,6 +68,8 @@ type Toolchain interface {
 	ClangLdflags() string
 	ClangInstructionSetFlags(string) (string, error)
 
+	ndkTriple() string
+
 	YasmFlags() string
 
 	WindresFlags() string
@@ -87,6 +89,19 @@ type Toolchain interface {
 type toolchainBase struct {
 }
 
+func (t *toolchainBase) ndkTriple() string {
+	return ""
+}
+
+func NDKTriple(toolchain Toolchain) string {
+	triple := toolchain.ndkTriple()
+	if triple == "" {
+		// Use the clang triple if there is no explicit NDK triple
+		triple = toolchain.ClangTriple()
+	}
+	return triple
+}
+
 func (toolchainBase) InstructionSetFlags(s string) (string, error) {
 	if s != "" {
 		return "", fmt.Errorf("instruction_set: %s is not a supported instruction set", s)
diff --git a/cc/makevars.go b/cc/makevars.go
index 3bb00a1a..83a662f7 100644
--- a/cc/makevars.go
+++ b/cc/makevars.go
@@ -318,7 +318,7 @@ func makeVarsToolchain(ctx android.MakeVarsContext, secondPrefix string,
 		ctx.Strict(makePrefix+"STRIP", gccCmd(toolchain, "strip"))
 		ctx.Strict(makePrefix+"GCC_VERSION", toolchain.GccVersion())
 		ctx.Strict(makePrefix+"NDK_GCC_VERSION", toolchain.GccVersion())
-		ctx.Strict(makePrefix+"NDK_TRIPLE", toolchain.ClangTriple())
+		ctx.Strict(makePrefix+"NDK_TRIPLE", config.NDKTriple(toolchain))
 	}
 
 	if target.Os.Class == android.Host || target.Os.Class == android.HostCross {
-- 
2.19.1

