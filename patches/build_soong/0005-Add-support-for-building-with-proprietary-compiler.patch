From 462c6ebe64c5c29c016363038ec74d9062ed9b32 Mon Sep 17 00:00:00 2001
From: Pengxuan Zheng <pzheng@codeaurora.org>
Date: Fri, 8 Dec 2017 16:30:34 -0800
Subject: [PATCH 05/17] Add support for building with proprietary compiler

Change-Id: If8fcf5aea659a0e65382818ab13db9b70b54f88f
Signed-off-by: Joe Maples <joe@frap129.org>
---
 android/env.go            |   3 +
 cc/builder.go             |  31 +++++--
 cc/cc.go                  |  24 ++++++
 cc/config/arm64_device.go |  18 +++++
 cc/config/global.go       | 166 ++++++++++++++++++++++++++++++++++++++
 cc/makevars.go            |  12 +++
 cc/sanitize.go            |  10 +++
 cc/util.go                |   1 +
 8 files changed, 259 insertions(+), 6 deletions(-)

diff --git a/android/env.go b/android/env.go
index 469dfffe..80890cfa 100644
--- a/android/env.go
+++ b/android/env.go
@@ -29,13 +29,16 @@ import (
 // a manifest regeneration.
 
 var originalEnv map[string]string
+var SdclangEnv map[string]string
 
 func init() {
 	originalEnv = make(map[string]string)
+	SdclangEnv = make(map[string]string)
 	for _, env := range os.Environ() {
 		idx := strings.IndexRune(env, '=')
 		if idx != -1 {
 			originalEnv[env[:idx]] = env[idx+1:]
+			SdclangEnv[env[:idx]] = env[idx+1:]
 		}
 	}
 	os.Clearenv()
diff --git a/cc/builder.go b/cc/builder.go
index eac24490..de1bf1f6 100644
--- a/cc/builder.go
+++ b/cc/builder.go
@@ -250,6 +250,7 @@ type builderFlags struct {
 	rsFlags        string
 	toolchain      config.Toolchain
 	clang          bool
+	sdclang        bool
 	tidy           bool
 	coverage       bool
 	sAbiDump       bool
@@ -428,8 +429,14 @@ func TransformSourceToObj(ctx android.ModuleContext, subdir string, srcFiles and
 
 		ccDesc := ccCmd
 
+		var extraFlags string
 		if flags.clang {
-			ccCmd = "${config.ClangBin}/" + ccCmd
+			if flags.sdclang {
+				ccCmd = "${config.SDClangBin}/" + ccCmd
+				extraFlags = " ${config.SDClangFlags}"
+			} else {
+				ccCmd = "${config.ClangBin}/" + ccCmd
+			}
 		} else {
 			ccCmd = gccCmd(flags.toolchain, ccCmd)
 		}
@@ -450,7 +457,7 @@ func TransformSourceToObj(ctx android.ModuleContext, subdir string, srcFiles and
 			Implicits:       cFlagsDeps,
 			OrderOnly:       pathDeps,
 			Args: map[string]string{
-				"cFlags": moduleCflags,
+				"cFlags": moduleCflags + extraFlags,
 				"ccCmd":  ccCmd,
 			},
 		})
@@ -618,8 +625,14 @@ func TransformObjToDynamicBinary(ctx android.ModuleContext,
 	crtBegin, crtEnd android.OptionalPath, groupLate bool, flags builderFlags, outputFile android.WritablePath) {
 
 	var ldCmd string
+	var extraFlags string
 	if flags.clang {
-		ldCmd = "${config.ClangBin}/clang++"
+		if flags.sdclang {
+			ldCmd = "${config.SDClangBin}/clang++"
+			extraFlags = " ${config.SDClangFlags}"
+		} else {
+			ldCmd = "${config.ClangBin}/clang++"
+		}
 	} else {
 		ldCmd = gccCmd(flags.toolchain, "g++")
 	}
@@ -677,7 +690,7 @@ func TransformObjToDynamicBinary(ctx android.ModuleContext,
 			"ldCmd":    ldCmd,
 			"crtBegin": crtBegin.String(),
 			"libFlags": strings.Join(libFlagsList, " "),
-			"ldFlags":  flags.ldFlags,
+			"ldFlags":  flags.ldFlags + extraFlags,
 			"crtEnd":   crtEnd.String(),
 		},
 	})
@@ -769,8 +782,14 @@ func TransformObjsToObj(ctx android.ModuleContext, objFiles android.Paths,
 	flags builderFlags, outputFile android.WritablePath) {
 
 	var ldCmd string
+        var extraFlags string
 	if flags.clang {
-		ldCmd = "${config.ClangBin}/clang++"
+		if flags.sdclang {
+			ldCmd = "${config.SDClangBin}/clang++"
+			extraFlags = " ${config.SDClangFlags}"
+		} else {
+			ldCmd = "${config.ClangBin}/clang++"
+		}
 	} else {
 		ldCmd = gccCmd(flags.toolchain, "g++")
 	}
@@ -782,7 +801,7 @@ func TransformObjsToObj(ctx android.ModuleContext, objFiles android.Paths,
 		Inputs:      objFiles,
 		Args: map[string]string{
 			"ldCmd":   ldCmd,
-			"ldFlags": flags.ldFlags,
+			"ldFlags": flags.ldFlags + extraFlags,
 		},
 	})
 }
diff --git a/cc/cc.go b/cc/cc.go
index 51ac1840..99d7cc0c 100644
--- a/cc/cc.go
+++ b/cc/cc.go
@@ -133,6 +133,7 @@ type Flags struct {
 
 	Toolchain config.Toolchain
 	Clang     bool
+	Sdclang   bool
 	Tidy      bool
 	Coverage  bool
 	SAbiDump  bool
@@ -161,6 +162,9 @@ type BaseProperties struct {
 	// compile module with clang instead of gcc
 	Clang *bool `android:"arch_variant"`
 
+	// compile module with SDLLVM instead of AOSP LLVM
+	Sdclang *bool `android:"arch_variant"`
+
 	// Minimum sdk version supported when compiling against the ndk
 	Sdk_version *string
 
@@ -675,6 +679,7 @@ func (c *Module) GenerateAndroidBuildActions(actx android.ModuleContext) {
 	flags := Flags{
 		Toolchain: c.toolchain(ctx),
 		Clang:     c.clang(ctx),
+		Sdclang:   c.sdclang(ctx),
 	}
 	if c.compiler != nil {
 		flags = c.compiler.compilerFlags(ctx, flags, deps)
@@ -1136,6 +1141,25 @@ func checkLinkType(ctx android.ModuleContext, from *Module, to *Module, tag depe
 	}
 }
 
+func (c *Module) sdclang(ctx BaseModuleContext) bool {
+	sdclang := Bool(c.Properties.Sdclang)
+
+	if !c.clang(ctx) {
+		return false
+	}
+
+	// SDLLVM is not for host build
+	if ctx.Host() {
+		return false
+	}
+
+	if c.Properties.Sdclang == nil && config.SDClang {
+		return true
+	}
+
+	return sdclang
+}
+
 // Convert dependencies to paths.  Returns a PathDeps containing paths
 func (c *Module) depsToPaths(ctx android.ModuleContext) PathDeps {
 	var depPaths PathDeps
diff --git a/cc/config/arm64_device.go b/cc/config/arm64_device.go
index 19d6256d..cc4c35e8 100644
--- a/cc/config/arm64_device.go
+++ b/cc/config/arm64_device.go
@@ -80,6 +80,22 @@ const (
 	arm64GccVersion = "8.x"
 )
 
+func setSdclangFlags() {
+	sdclangArm64Ldflags := arm64Ldflags
+	s := -1
+	for i, l := range arm64Ldflags {
+		if l == "-Wl,-m,aarch64_elf64_le_vec" {
+			s = i
+			break
+		}
+	}
+	if s >= 0 {
+		sdclangArm64Ldflags = append(arm64Ldflags[:s], arm64Ldflags[s+1:]...)
+	}
+
+	pctx.StaticVariable("SdclangArm64Ldflags", strings.Join(sdclangArm64Ldflags, " "))
+}
+
 func init() {
 	android.RegisterArchVariants(android.Arm64,
 		"armv8_a",
@@ -107,6 +123,8 @@ func init() {
 	pctx.StaticVariable("Arm64Cppflags", strings.Join(arm64Cppflags, " "))
 	pctx.StaticVariable("Arm64IncludeFlags", bionicHeaders("arm64"))
 
+	setSdclangFlags()
+
 	pctx.StaticVariable("Arm64ClangCflags", strings.Join(ClangFilterUnknownCflags(arm64Cflags), " "))
 	pctx.StaticVariable("Arm64ClangLdflags", strings.Join(ClangFilterUnknownCflags(arm64Ldflags), " "))
 	pctx.StaticVariable("Arm64ClangCppflags", strings.Join(ClangFilterUnknownCflags(arm64Cppflags), " "))
diff --git a/cc/config/global.go b/cc/config/global.go
index da0a3083..146a26c6 100644
--- a/cc/config/global.go
+++ b/cc/config/global.go
@@ -15,8 +15,12 @@
 package config
 
 import (
+	"encoding/json"
 	"fmt"
+	"os"
+	"path"
 	"runtime"
+	"strconv"
 	"strings"
 
 	"android/soong/android"
@@ -114,6 +118,8 @@ var (
 
 	NdkMaxPrebuiltVersionInt = 27
 
+	SDClang                  = false
+
 	// prebuilts/clang default settings.
 	ClangDefaultBase         = "prebuilts/clang/host"
 	ClangDefaultVersion      = "clang-4691093"
@@ -179,6 +185,8 @@ func init() {
 	pctx.PrefixedExistentPathsForSourcesVariable("CommonNativehelperInclude", "-I",
 		[]string{"libnativehelper/include_jni"})
 
+	setSdclangVars()
+
 	pctx.SourcePathVariable("ClangDefaultBase", ClangDefaultBase)
 	pctx.VariableFunc("ClangBase", func(ctx android.PackageVarContext) string {
 		if override := ctx.Config().Getenv("LLVM_PREBUILTS_BASE"); override != "" {
@@ -230,6 +238,164 @@ func init() {
 	})
 }
 
+func setSdclangVars() {
+	sdclangPath := ""
+	sdclangPath2 := ""
+	sdclangAEFlag := ""
+	sdclangFlags := ""
+	sdclangFlags2 := ""
+
+	product := android.SdclangEnv["TARGET_PRODUCT"]
+	androidRoot := android.SdclangEnv["ANDROID_BUILD_TOP"]
+	aeConfigPath := android.SdclangEnv["SDCLANG_AE_CONFIG"]
+	sdclangConfigPath := android.SdclangEnv["SDCLANG_CONFIG"]
+	sdclangSA := android.SdclangEnv["SDCLANG_SA_ENABLED"]
+
+	type sdclangAEConfig struct {
+		SDCLANG_AE_FLAG string
+	}
+
+	// Load AE config file and set AE flag
+	aeConfigFile := path.Join(androidRoot, aeConfigPath)
+	if file, err := os.Open(aeConfigFile); err == nil {
+		decoder := json.NewDecoder(file)
+		aeConfig := sdclangAEConfig{}
+		if err := decoder.Decode(&aeConfig); err == nil {
+			sdclangAEFlag = aeConfig.SDCLANG_AE_FLAG
+		} else {
+			panic(err)
+		}
+	}
+
+	// Load SD Clang config file and set SD Clang variables
+	sdclangConfigFile := path.Join(androidRoot, sdclangConfigPath)
+	var sdclangConfig interface{}
+	if file, err := os.Open(sdclangConfigFile); err == nil {
+		decoder := json.NewDecoder(file)
+                // Parse the config file
+		if err := decoder.Decode(&sdclangConfig); err == nil {
+			config := sdclangConfig.(map[string]interface{})
+			// Retrieve the default block
+			if dev, ok := config["default"]; ok {
+				devConfig := dev.(map[string]interface{})
+				// SDCLANG is optional in the default block
+				if _, ok := devConfig["SDCLANG"]; ok {
+					SDClang = devConfig["SDCLANG"].(bool)
+				}
+				// SDCLANG_PATH is required in the default block
+				if _, ok := devConfig["SDCLANG_PATH"]; ok {
+					sdclangPath = devConfig["SDCLANG_PATH"].(string)
+				} else {
+					panic("SDCLANG_PATH is required in the default block")
+				}
+				// SDCLANG_PATH_2 is required in the default block
+				if _, ok := devConfig["SDCLANG_PATH_2"]; ok {
+					sdclangPath2 = devConfig["SDCLANG_PATH_2"].(string)
+				} else {
+					panic("SDCLANG_PATH_2 is required in the default block")
+				}
+				// SDCLANG_FLAGS is optional in the default block
+				if _, ok := devConfig["SDCLANG_FLAGS"]; ok {
+					sdclangFlags = devConfig["SDCLANG_FLAGS"].(string)
+				}
+				// SDCLANG_FLAGS_2 is optional in the default block
+				if _, ok := devConfig["SDCLANG_FLAGS_2"]; ok {
+					sdclangFlags2 = devConfig["SDCLANG_FLAGS_2"].(string)
+				}
+			} else {
+				panic("Default block is required in the SD Clang config file")
+			}
+			// Retrieve the device specific block if it exists in the config file
+			if dev, ok := config[product]; ok {
+				devConfig := dev.(map[string]interface{})
+				// SDCLANG is optional in the device specific block
+				if _, ok := devConfig["SDCLANG"]; ok {
+					SDClang = devConfig["SDCLANG"].(bool)
+				}
+				// SDCLANG_PATH is optional in the device specific block
+				if _, ok := devConfig["SDCLANG_PATH"]; ok {
+					sdclangPath = devConfig["SDCLANG_PATH"].(string)
+				}
+				// SDCLANG_PATH_2 is optional in the device specific block
+				if _, ok := devConfig["SDCLANG_PATH_2"]; ok {
+					sdclangPath2 = devConfig["SDCLANG_PATH_2"].(string)
+				}
+				// SDCLANG_FLAGS is optional in the device specific block
+				if _, ok := devConfig["SDCLANG_FLAGS"]; ok {
+					sdclangFlags = devConfig["SDCLANG_FLAGS"].(string)
+				}
+				// SDCLANG_FLAGS_2 is optional in the device specific block
+				if _, ok := devConfig["SDCLANG_FLAGS_2"]; ok {
+					sdclangFlags2 = devConfig["SDCLANG_FLAGS_2"].(string)
+				}
+			}
+			b, _ := strconv.ParseBool(sdclangSA)
+			if(b) {
+				androidroot_llvm := []string{androidRoot, "llvmsa"}
+				llvmsa_loc := strings.Join(androidroot_llvm, "/")
+				s := []string{sdclangFlags, "--compile-and-analyze", llvmsa_loc}
+				sdclangFlags = strings.Join(s, " ")
+				fmt.Println("Clang SA is enabled: ", sdclangFlags)
+			} else {
+				fmt.Println("Clang SA is not enabled")
+			}
+		} else {
+			panic(err)
+		}
+	} else {
+		fmt.Println(err)
+	}
+
+	// Override SDCLANG if the varialbe is set in the environment
+	if sdclang := android.SdclangEnv["SDCLANG"]; sdclang != "" {
+		if override, err := strconv.ParseBool(sdclang); err == nil {
+			SDClang = override
+		}
+	}
+
+	// Sanity check SDCLANG_PATH
+	if envPath := android.SdclangEnv["SDCLANG_PATH"]; sdclangPath == "" && envPath == "" {
+		panic("SDCLANG_PATH can not be empty")
+	}
+
+	// Sanity check SDCLANG_PATH_2
+	if envPath := android.SdclangEnv["SDCLANG_PATH_2"]; sdclangPath2 == "" && envPath == "" {
+		panic("SDCLANG_PATH_2 can not be empty")
+	}
+
+	// Override SDCLANG_PATH if the variable is set in the environment
+	pctx.VariableFunc("SDClangBin", func(config android.Config) (string, error) {
+		if override := config.Getenv("SDCLANG_PATH"); override != "" {
+			return override, nil
+		}
+		return sdclangPath, nil
+	})
+
+	// Override SDCLANG_PATH_2 if the variable is set in the environment
+	pctx.VariableFunc("SDClangBin2", func(config android.Config) (string, error) {
+		if override := config.Getenv("SDCLANG_PATH_2"); override != "" {
+			return override, nil
+		}
+		return sdclangPath2, nil
+	})
+
+	// Override SDCLANG_COMMON_FLAGS if the variable is set in the environment
+	pctx.VariableFunc("SDClangFlags", func(config android.Config) (string, error) {
+		if override := config.Getenv("SDCLANG_COMMON_FLAGS"); override != "" {
+			return override, nil
+		}
+		return sdclangAEFlag + " " + sdclangFlags, nil
+	})
+
+	// Override SDCLANG_COMMON_FLAGS_2 if the variable is set in the environment
+	pctx.VariableFunc("SDClangFlags2", func(config android.Config) (string, error) {
+		if override := config.Getenv("SDCLANG_COMMON_FLAGS_2"); override != "" {
+			return override, nil
+		}
+		return sdclangAEFlag + " " + sdclangFlags2, nil
+	})
+}
+
 var HostPrebuiltTag = pctx.VariableConfigMethod("HostPrebuiltTag", android.Config.PrebuiltOS)
 
 func bionicHeaders(kernelArch string) string {
diff --git a/cc/makevars.go b/cc/makevars.go
index 83a662f7..d28195ed 100644
--- a/cc/makevars.go
+++ b/cc/makevars.go
@@ -17,6 +17,7 @@ package cc
 import (
 	"fmt"
 	"sort"
+	"strconv"
 	"strings"
 	"sync"
 
@@ -64,6 +65,7 @@ func makeStringOfWarningAllowedProjects() string {
 }
 
 func makeVarsProvider(ctx android.MakeVarsContext) {
+	sdclangMakeVars(ctx)
 	ctx.Strict("LLVM_RELEASE_VERSION", "${config.ClangShortVersion}")
 	ctx.Strict("LLVM_PREBUILTS_VERSION", "${config.ClangVersion}")
 	ctx.Strict("LLVM_PREBUILTS_BASE", "${config.ClangBase}")
@@ -184,6 +186,16 @@ func makeVarsProvider(ctx android.MakeVarsContext) {
 	}
 }
 
+func sdclangMakeVars(ctx android.MakeVarsContext) {
+	if config.SDClang {
+		ctx.Strict("SDCLANG", strconv.FormatBool(config.SDClang))
+	}
+	ctx.Strict("SDCLANG_PATH", "${config.SDClangBin}")
+	ctx.Strict("SDCLANG_PATH_2", "${config.SDClangBin2}")
+	ctx.Strict("SDCLANG_COMMON_FLAGS", "${config.SDClangFlags}")
+	ctx.Strict("SDCLANG_COMMON_FLAGS_2", "${config.SDClangFlags2}")
+}
+
 func makeVarsToolchain(ctx android.MakeVarsContext, secondPrefix string,
 	target android.Target) {
 	var typePrefix string
diff --git a/cc/sanitize.go b/cc/sanitize.go
index de970352..6acac6c0 100644
--- a/cc/sanitize.go
+++ b/cc/sanitize.go
@@ -427,6 +427,16 @@ func (sanitize *sanitize) flags(ctx ModuleContext, flags Flags) Flags {
 			_, flags.CFlags = removeFromList("-fsanitize-cfi-cross-dso", flags.CFlags)
 			_, flags.LdFlags = removeFromList("-fsanitize-cfi-cross-dso", flags.LdFlags)
 		}
+
+		if flags.Sdclang {
+			_, flags.LdFlags = removeFromList("-Wl,-plugin-opt,O1", flags.LdFlags)
+			var found bool
+			if found, flags.LdFlags = removeFromList("${config.Arm64Ldflags}", flags.LdFlags); found {
+				flags.LdFlags = append(flags.LdFlags, "${config.SdclangArm64Ldflags}")
+			}
+			flags.CFlags = append(flags.CFlags, "-fuse-ld=qcld")
+			flags.LdFlags = append(flags.LdFlags, "-fuse-ld=qcld")
+		}
 	}
 
 	if Bool(sanitize.Properties.Sanitize.Integer_overflow) {
diff --git a/cc/util.go b/cc/util.go
index 1e4a0c0c..73e828fa 100644
--- a/cc/util.go
+++ b/cc/util.go
@@ -77,6 +77,7 @@ func flagsToBuilderFlags(in Flags) builderFlags {
 		yasmFlags:      strings.Join(in.YasmFlags, " "),
 		toolchain:      in.Toolchain,
 		clang:          in.Clang,
+		sdclang:        in.Sdclang,
 		coverage:       in.Coverage,
 		tidy:           in.Tidy,
 		sAbiDump:       in.SAbiDump,
-- 
2.19.1

