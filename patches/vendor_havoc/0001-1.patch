From 11b62252f2c2ef980c79499fe0d4f855e92f7a36 Mon Sep 17 00:00:00 2001
From: Kazakov Stepan <kazakov12stepan2012@live.ru>
Date: Wed, 31 Oct 2018 16:54:56 +0300
Subject: [PATCH 1/3] 1

---
 build/core/BoardConfigKernel.mk    | 277 ++++++++++++++++++++++++++
 build/core/BoardConfigQcom.mk      |  68 +++++++
 build/core/BoardConfigSoong.mk     |  24 +++
 build/core/mtk_target.mk           |   2 +-
 build/core/qcom_target.mk          |  20 +-
 build/core/qcom_utils.mk           |   2 -
 build/envsetup.sh                  |  18 +-
 build/soong/Android.bp             |  38 ++++
 build/soong/generator/generator.go | 310 +++++++++++++++++++++++++++++
 build/soong/generator/variables.go |  28 +++
 build/tasks/kernel.mk              |   2 +-
 config/BoardConfigHavoc.mk         |   2 +-
 config/BoardConfigQcom.mk          |  39 +---
 config/common.mk                   |   2 +-
 config/version.mk                  |   1 -
 15 files changed, 774 insertions(+), 59 deletions(-)
 create mode 100644 build/core/BoardConfigKernel.mk
 create mode 100644 build/core/BoardConfigQcom.mk
 create mode 100644 build/core/BoardConfigSoong.mk
 create mode 100644 build/soong/generator/generator.go
 create mode 100644 build/soong/generator/variables.go

diff --git a/build/core/BoardConfigKernel.mk b/build/core/BoardConfigKernel.mk
new file mode 100644
index 00000000..a4b8c194
--- /dev/null
+++ b/build/core/BoardConfigKernel.mk
@@ -0,0 +1,277 @@
+# Copyright (C) 2018 The LineageOS Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+#
+# Kernel build configuration variables
+# ====================================
+#
+# These config vars are usually set in BoardConfig.mk:
+#
+#   TARGET_KERNEL_SOURCE               = Kernel source dir, optional, defaults
+#                                        to kernel/$(TARGET_DEVICE_DIR)
+#   TARGET_KERNEL_CONFIG               = Kernel defconfig
+#   TARGET_KERNEL_VARIANT_CONFIG       = Variant defconfig, optional
+#   TARGET_KERNEL_SELINUX_CONFIG       = SELinux defconfig, optional
+#   TARGET_KERNEL_ADDITIONAL_CONFIG    = Additional defconfig, optional
+#   TARGET_KERNEL_ARCH                 = Kernel Arch
+#   TARGET_KERNEL_CROSS_COMPILE_PREFIX = Compiler prefix (e.g. arm-eabi-)
+#                                          defaults to arm-linux-androidkernel- for arm
+#                                                      aarch64-linux-androidkernel- for arm64
+#                                                      x86_64-linux-androidkernel- for x86
+#
+#   TARGET_KERNEL_CLANG_COMPILE        = Compile kernel with clang, defaults to false
+#
+#   TARGET_KERNEL_CLANG_VERSION        = Clang prebuilts version, optional, defaults to clang-stable
+#
+#   TARGET_KERNEL_CLANG_PATH           = Clang prebuilts path, optional
+#
+#   BOARD_KERNEL_IMAGE_NAME            = Built image name
+#                                          for ARM use: zImage
+#                                          for ARM64 use: Image.gz
+#                                          for uncompressed use: Image
+#                                          If using an appended DT, append '-dtb'
+#                                          to the end of the image name.
+#                                          For example, for ARM devices,
+#                                          use zImage-dtb instead of zImage.
+#
+#   KERNEL_TOOLCHAIN_PREFIX            = Overrides TARGET_KERNEL_CROSS_COMPILE_PREFIX,
+#                                          Set this var in shell to override
+#                                          toolchain specified in BoardConfig.mk
+#   KERNEL_TOOLCHAIN                   = Path to toolchain, if unset, assumes
+#                                          TARGET_KERNEL_CROSS_COMPILE_PREFIX
+#                                          is in PATH
+#
+#   KERNEL_CC                          = The C Compiler used. This is automatically set based
+#                                          on whether the clang version is set, optional.
+#
+#   KERNEL_CLANG_TRIPLE                = Target triple for clang (e.g. aarch64-linux-gnu-)
+#                                          defaults to arm-linux-gnu- for arm
+#                                                      aarch64-linux-gnu- for arm64
+#                                                      x86_64-linux-gnu- for x86
+#
+#   USE_CCACHE                         = Enable ccache (global Android flag)
+#
+#   NEED_KERNEL_MODULE_ROOT            = Optional, if true, install kernel
+#                                          modules in root instead of vendor
+#   NEED_KERNEL_MODULE_SYSTEM          = Optional, if true, install kernel
+#                                          modules in system instead of vendor
+
+ifneq ($(TARGET_NO_KERNEL),true)
+
+## Externally influenced variables
+KERNEL_SRC := $(TARGET_KERNEL_SOURCE)
+# kernel configuration - mandatory
+KERNEL_DEFCONFIG := $(TARGET_KERNEL_CONFIG)
+VARIANT_DEFCONFIG := $(TARGET_KERNEL_VARIANT_CONFIG)
+SELINUX_DEFCONFIG := $(TARGET_KERNEL_SELINUX_CONFIG)
+
+## Internal variables
+KERNEL_OUT := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
+KERNEL_CONFIG := $(KERNEL_OUT)/.config
+
+TARGET_AUTO_KDIR := $(shell echo $(TARGET_DEVICE_DIR) | sed -e 's/^device/kernel/g')
+
+# kernel location - optional, defaults to kernel/<vendor>/<device> (see above TARGET_AUTO_KDIR)
+TARGET_KERNEL_SOURCE ?= $(TARGET_AUTO_KDIR)
+ifneq ($(TARGET_PREBUILT_KERNEL),)
+TARGET_KERNEL_SOURCE :=
+endif
+
+CUSTOM_KERNEL_ARCH := $(strip $(TARGET_KERNEL_ARCH))
+ifeq ($(CUSTOM_KERNEL_ARCH),)
+KERNEL_ARCH := $(TARGET_ARCH)
+else
+KERNEL_ARCH := $(CUSTOM_KERNEL_ARCH)
+endif
+
+ifeq ($(KERNEL_ARCH),x86_64)
+KERNEL_DEFCONFIG_ARCH := x86
+else
+KERNEL_DEFCONFIG_ARCH := $(KERNEL_ARCH)
+endif
+KERNEL_DEFCONFIG_SRC := $(KERNEL_SRC)/arch/$(KERNEL_DEFCONFIG_ARCH)/configs/$(KERNEL_DEFCONFIG)
+
+ifeq ($(BOARD_KERNEL_IMAGE_NAME),)
+$(error BOARD_KERNEL_IMAGE_NAME not defined.)
+endif
+ifneq ($(TARGET_USES_UNCOMPRESSED_KERNEL),)
+$(error TARGET_USES_UNCOMPRESSED_KERNEL is deprecated.)
+endif
+ifneq ($(TARGET_KERNEL_APPEND_DTB),)
+$(error TARGET_KERNEL_APPEND_DTB is deprecated.)
+endif
+TARGET_PREBUILT_INT_KERNEL := $(KERNEL_OUT)/arch/$(KERNEL_ARCH)/boot/$(BOARD_KERNEL_IMAGE_NAME)
+
+# Clear this first to prevent accidental poisoning from env
+KERNEL_MAKE_FLAGS := -j4
+
+ifeq ($(KERNEL_ARCH),arm)
+  # Avoid "Unknown symbol _GLOBAL_OFFSET_TABLE_" errors
+  KERNEL_MAKE_FLAGS += CFLAGS_MODULE="-fno-pic"
+endif
+
+ifeq ($(KERNEL_ARCH),arm64)
+  # Avoid "unsupported RELA relocation: 311" errors (R_AARCH64_ADR_GOT_PAGE)
+  KERNEL_MAKE_FLAGS += CFLAGS_MODULE="-fno-pic"
+endif
+
+ifneq ($(TARGET_KERNEL_ADDITIONAL_CONFIG),)
+KERNEL_ADDITIONAL_CONFIG := $(TARGET_KERNEL_ADDITIONAL_CONFIG)
+KERNEL_ADDITIONAL_CONFIG_SRC := $(KERNEL_SRC)/arch/$(KERNEL_ARCH)/configs/$(KERNEL_ADDITIONAL_CONFIG)
+    ifeq ("$(wildcard $(KERNEL_ADDITIONAL_CONFIG_SRC))","")
+        $(warning TARGET_KERNEL_ADDITIONAL_CONFIG '$(TARGET_KERNEL_ADDITIONAL_CONFIG)' doesn't exist)
+        KERNEL_ADDITIONAL_CONFIG_SRC := /dev/null
+    endif
+else
+    KERNEL_ADDITIONAL_CONFIG_SRC := /dev/null
+endif
+
+ifeq "$(wildcard $(KERNEL_SRC) )" ""
+    ifneq ($(TARGET_PREBUILT_KERNEL),)
+        HAS_PREBUILT_KERNEL := true
+        NEEDS_KERNEL_COPY := true
+    else
+        $(foreach cf,$(PRODUCT_COPY_FILES), \
+            $(eval _src := $(call word-colon,1,$(cf))) \
+            $(eval _dest := $(call word-colon,2,$(cf))) \
+            $(ifeq kernel,$(_dest), \
+                $(eval HAS_PREBUILT_KERNEL := true)))
+    endif
+
+    ifneq ($(HAS_PREBUILT_KERNEL),)
+        $(warning ***************************************************************)
+        $(warning * Using prebuilt kernel binary instead of source              *)
+        $(warning * THIS IS DEPRECATED, AND WILL BE DISCONTINUED                *)
+        $(warning * Please configure your device to download the kernel         *)
+        $(warning * source repository to $(KERNEL_SRC))
+        $(warning * for more information                                        *)
+        $(warning ***************************************************************)
+        FULL_KERNEL_BUILD := false
+        KERNEL_BIN := $(TARGET_PREBUILT_KERNEL)
+    else
+        $(warning ***************************************************************)
+        $(warning *                                                             *)
+        $(warning * No kernel source found, and no fallback prebuilt defined.   *)
+        $(warning * Please make sure your device is properly configured to      *)
+        $(warning * download the kernel repository to $(KERNEL_SRC))
+        $(warning * and add the TARGET_KERNEL_CONFIG variable to BoardConfig.mk *)
+        $(warning *                                                             *)
+        $(warning * As an alternative, define the TARGET_PREBUILT_KERNEL        *)
+        $(warning * variable with the path to the prebuilt binary kernel image  *)
+        $(warning * in your BoardConfig.mk file                                 *)
+        $(warning *                                                             *)
+        $(warning ***************************************************************)
+        $(error "NO KERNEL")
+    endif
+else
+    NEEDS_KERNEL_COPY := true
+    ifeq ($(TARGET_KERNEL_CONFIG),)
+        $(warning **********************************************************)
+        $(warning * Kernel source found, but no configuration was defined  *)
+        $(warning * Please add the TARGET_KERNEL_CONFIG variable to your   *)
+        $(warning * BoardConfig.mk file                                    *)
+        $(warning **********************************************************)
+        # $(error "NO KERNEL CONFIG")
+    else
+        #$(info Kernel source found, building it)
+        FULL_KERNEL_BUILD := true
+        KERNEL_BIN := $(TARGET_PREBUILT_INT_KERNEL)
+    endif
+endif
+
+ifeq ($(FULL_KERNEL_BUILD),true)
+
+KERNEL_HEADERS_INSTALL_DIR := $(KERNEL_OUT)/usr
+KERNEL_HEADERS_INSTALL_DEPS := $(KERNEL_OUT)/.headers_install_deps
+
+TARGET_KERNEL_CROSS_COMPILE_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_PREFIX))
+ifneq ($(TARGET_KERNEL_CROSS_COMPILE_PREFIX),)
+KERNEL_TOOLCHAIN_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_PREFIX)
+else ifeq ($(KERNEL_ARCH),arm64)
+KERNEL_TOOLCHAIN_PREFIX ?= aarch64-linux-androidkernel-
+else ifeq ($(KERNEL_ARCH),arm)
+KERNEL_TOOLCHAIN_PREFIX ?= arm-linux-androidkernel-
+else ifeq ($(KERNEL_ARCH),x86)
+KERNEL_TOOLCHAIN_PREFIX ?= x86_64-linux-androidkernel-
+endif
+
+ifeq ($(KERNEL_TOOLCHAIN),)
+KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN_PREFIX)
+else
+ifneq ($(KERNEL_TOOLCHAIN_PREFIX),)
+KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN)/$(KERNEL_TOOLCHAIN_PREFIX)
+endif
+endif
+
+BUILD_TOP := $(shell pwd)
+
+ifeq ($(TARGET_KERNEL_CLANG_COMPILE),true)
+    ifneq ($(TARGET_KERNEL_CLANG_VERSION),)
+        # Find the clang-* directory containing the specified version
+        KERNEL_CLANG_VERSION := $(shell find $(BUILD_TOP)/prebuilts/clang/host/$(HOST_OS)-x86/ -name AndroidVersion.txt -exec grep -l $(TARGET_KERNEL_CLANG_VERSION) "{}" \; | sed -e 's|/AndroidVersion.txt$$||g;s|^.*/||g')
+    else
+        # Use the default version of clang if TARGET_KERNEL_CLANG_VERSION hasn't been set by the device config
+        KERNEL_CLANG_VERSION := $(LLVM_PREBUILTS_VERSION)
+    endif
+    TARGET_KERNEL_CLANG_PATH ?= $(BUILD_TOP)/prebuilts/clang/host/$(HOST_OS)-x86/$(KERNEL_CLANG_VERSION)/bin
+    ifeq ($(KERNEL_ARCH),arm64)
+        KERNEL_CLANG_TRIPLE ?= CLANG_TRIPLE=aarch64-linux-gnu-
+    else ifeq ($(KERNEL_ARCH),arm)
+        KERNEL_CLANG_TRIPLE ?= CLANG_TRIPLE=arm-linux-gnu-
+    else ifeq ($(KERNEL_ARCH),x86)
+        KERNEL_CLANG_TRIPLE ?= CLANG_TRIPLE=x86_64-linux-gnu-
+    endif
+endif
+
+ifneq ($(USE_CCACHE),)
+    # Detect if the system already has ccache installed to use instead of the prebuilt
+    ccache := $(shell which ccache)
+
+    ifeq ($(ccache),)
+        ccache := $(BUILD_TOP)/prebuilts/misc/$(HOST_PREBUILT_TAG)/ccache/ccache
+        # Check that the executable is here.
+        ccache := $(strip $(wildcard $(ccache)))
+    endif
+endif
+
+ifeq ($(TARGET_KERNEL_CLANG_COMPILE),true)
+    KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(KERNEL_TOOLCHAIN_PATH)"
+    ifeq ($(KERNEL_CC),)
+        KERNEL_CC := CC="$(ccache) $(TARGET_KERNEL_CLANG_PATH)/clang"
+    endif
+else
+    KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
+endif
+
+# Needed for CONFIG_COMPAT_VDSO, safe to set for all arm64 builds
+ifeq ($(KERNEL_ARCH),arm64)
+   KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="arm-linux-androideabi-"
+endif
+
+ccache =
+
+ifeq ($(HOST_OS),darwin)
+  KERNEL_MAKE_FLAGS += C_INCLUDE_PATH=$(BUILD_TOP)/external/elfutils/libelf:/usr/local/opt/openssl/include
+  KERNEL_MAKE_FLAGS += LIBRARY_PATH=/usr/local/opt/openssl/lib
+endif
+
+ifeq ($(TARGET_KERNEL_MODULES),)
+    TARGET_KERNEL_MODULES := INSTALLED_KERNEL_MODULES
+endif
+
+KERNEL_ADDITIONAL_CONFIG_OUT := $(KERNEL_OUT)/.additional_config
+
+endif # FULL_KERNEL_BUILD
+
+endif # TARGET_NO_KERNEL
diff --git a/build/core/BoardConfigQcom.mk b/build/core/BoardConfigQcom.mk
new file mode 100644
index 00000000..81740342
--- /dev/null
+++ b/build/core/BoardConfigQcom.mk
@@ -0,0 +1,68 @@
+# Bring in Qualcomm helper macros
+include vendor/havoc/build/core/qcom_utils.mk
+
+B_FAMILY := msm8226 msm8610 msm8974
+B64_FAMILY := msm8992 msm8994
+BR_FAMILY := msm8909 msm8916
+UM_3_18_FAMILY := msm8937 msm8953 msm8996
+UM_4_4_FAMILY := msm8998 sdm660
+
+BOARD_USES_ADRENO := true
+
+#TARGET_USES_QCOM_BSP := true
+
+# Tell HALs that we're compiling an AOSP build with an in-line kernel
+TARGET_COMPILE_WITH_MSM_KERNEL := true
+
+ifneq ($(filter msm7x27a msm7x30 msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
+    # Enable legacy audio functions
+    ifeq ($(BOARD_USES_LEGACY_ALSA_AUDIO),true)
+        USE_CUSTOM_AUDIO_POLICY := 1
+    endif
+endif
+
+# Allow building audio encoders
+TARGET_USES_QCOM_MM_AUDIO := true
+
+# Enable color metadata for UM platforms
+ifeq ($(call is-board-platform-in-list, $(UM_3_18_FAMILY) $(UM_4_4_FAMILY)),true)
+    TARGET_USES_COLOR_METADATA := true
+endif
+
+# List of targets that use master side content protection
+MASTER_SIDE_CP_TARGET_LIST := msm8996 msm8998 sdm660
+ifeq ($(call is-board-platform-in-list, $(B_FAMILY)),true)
+    MSM_VIDC_TARGET_LIST := $(B_FAMILY)
+    QCOM_HARDWARE_VARIANT := msm8974
+else
+ifeq ($(call is-board-platform-in-list, $(B64_FAMILY)),true)
+    MSM_VIDC_TARGET_LIST := $(B64_FAMILY)
+    QCOM_HARDWARE_VARIANT := msm8994
+else
+ifeq ($(call is-board-platform-in-list, $(BR_FAMILY)),true)
+    MSM_VIDC_TARGET_LIST := $(BR_FAMILY)
+    QCOM_HARDWARE_VARIANT := msm8916
+else
+ifeq ($(call is-board-platform-in-list, $(UM_3_18_FAMILY)),true)
+    MSM_VIDC_TARGET_LIST := $(UM_3_18_FAMILY)
+    QCOM_HARDWARE_VARIANT := msm8996
+else
+ifeq ($(call is-board-platform-in-list, $(UM_4_4_FAMILY)),true)
+    MSM_VIDC_TARGET_LIST := $(UM_4_4_FAMILY)
+    QCOM_HARDWARE_VARIANT := msm8998
+else
+    MSM_VIDC_TARGET_LIST := $(TARGET_BOARD_PLATFORM)
+    QCOM_HARDWARE_VARIANT := $(TARGET_BOARD_PLATFORM)
+endif
+endif
+endif
+endif
+endif
+
+PRODUCT_SOONG_NAMESPACES += \
+  hardware/qcom/audio-caf/$(QCOM_HARDWARE_VARIANT) \
+  hardware/qcom/display-caf/$(QCOM_HARDWARE_VARIANT) \
+  hardware/qcom/media-caf/$(QCOM_HARDWARE_VARIANT)
+
+include vendor/havoc/build/core/BoardConfigKernel.mk
+include vendor/havoc/build/core/BoardConfigSoong.mk
diff --git a/build/core/BoardConfigSoong.mk b/build/core/BoardConfigSoong.mk
new file mode 100644
index 00000000..5b6308fd
--- /dev/null
+++ b/build/core/BoardConfigSoong.mk
@@ -0,0 +1,24 @@
+# Add variables that we wish to make available to soong here.
+EXPORT_TO_SOONG := \
+    KERNEL_ARCH \
+    KERNEL_CC \
+    KERNEL_CLANG_TRIPLE \
+    KERNEL_CROSS_COMPILE \
+    KERNEL_MAKE_FLAGS \
+    TARGET_KERNEL_CONFIG \
+    TARGET_KERNEL_SOURCE
+
+# Setup SOONG_CONFIG_* vars to export the vars listed above.
+# Documentation here:
+# https://github.com/LineageOS/android_build_soong/commit/8328367c44085b948c003116c0ed74a047237a69
+
+SOONG_CONFIG_NAMESPACES += havocVarsPlugin
+
+SOONG_CONFIG_havocVarsPlugin :=
+
+define addVar
+  SOONG_CONFIG_havocVarsPlugin += $(1)
+  SOONG_CONFIG_havocVarsPlugin_$(1) := $$(subst ",\",$$($1))
+endef
+
+$(foreach v,$(EXPORT_TO_SOONG),$(eval $(call addVar,$(v))))
diff --git a/build/core/mtk_target.mk b/build/core/mtk_target.mk
index e4770ae6..bf8b8bcb 100644
--- a/build/core/mtk_target.mk
+++ b/build/core/mtk_target.mk
@@ -1,2 +1,2 @@
 # Bring in Mediatek helper macros
-include vendor/havoc/build/core/mtk_utils.mk
+include vendor/syberia/build/core/mtk_utils.mk
diff --git a/build/core/qcom_target.mk b/build/core/qcom_target.mk
index 2244c38d..62c3eb87 100644
--- a/build/core/qcom_target.mk
+++ b/build/core/qcom_target.mk
@@ -1,6 +1,12 @@
+# Target-specific configuration
+
 # Bring in Qualcomm helper macros
 include vendor/havoc/build/core/qcom_utils.mk
 
+# Populate the qcom hardware variants in the project pathmap.
+define ril-set-path-variant
+$(call project-set-path-variant,ril,TARGET_RIL_VARIANT,hardware/$(1))
+endef
 define wlan-set-path-variant
 $(call project-set-path-variant,wlan,TARGET_WLAN_VARIANT,hardware/qcom/$(1))
 endef
@@ -19,7 +25,6 @@ $(call project-set-path,qcom-$(2),$(strip $(path)))
 endef
 
 ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-
 $(call set-device-specific-path,AUDIO,audio,hardware/qcom/audio-caf/$(QCOM_HARDWARE_VARIANT))
 $(call set-device-specific-path,DISPLAY,display,hardware/qcom/display-caf/$(QCOM_HARDWARE_VARIANT))
 $(call set-device-specific-path,MEDIA,media,hardware/qcom/media-caf/$(QCOM_HARDWARE_VARIANT))
@@ -30,19 +35,11 @@ $(call set-device-specific-path,SENSORS,sensors,hardware/qcom/sensors)
 $(call set-device-specific-path,LOC_API,loc-api,vendor/qcom/opensource/location)
 $(call set-device-specific-path,DATASERVICES,dataservices,vendor/qcom/opensource/dataservices)
 $(call set-device-specific-path,POWER,power,hardware/qcom/power)
-$(call set-device-specific-path,THERMAL,thermal,hardware/qcom/thermal)
-$(call set-device-specific-path,VR,vr,hardware/qcom/vr)
 
-ifeq ($(BOARD_USES_AOSP_WLAN_HAL),true)
+$(call ril-set-path-variant,ril)
 $(call wlan-set-path-variant,wlan)
-else
-$(call wlan-set-path-variant,wlan-caf)
-endif
-
-$(call bt-vendor-set-path-variant,bt-caf)
+$(call bt-vendor-set-path-variant,bt)
 
-PRODUCT_CFI_INCLUDE_PATHS += \
-    hardware/qcom/wlan-caf/qcwcn/wpa_supplicant_8_lib
 else
 
 $(call project-set-path,qcom-audio,hardware/qcom/audio/default)
@@ -55,6 +52,7 @@ $(call project-set-path,qcom-sensors,hardware/qcom/sensors)
 $(call project-set-path,qcom-loc-api,vendor/qcom/opensource/location)
 $(call project-set-path,qcom-dataservices,$(TARGET_DEVICE_DIR)/dataservices)
 
+$(call ril-set-path-variant,ril)
 $(call wlan-set-path-variant,wlan)
 $(call bt-vendor-set-path-variant,bt)
 
diff --git a/build/core/qcom_utils.mk b/build/core/qcom_utils.mk
index f36ecaa0..ae586eb2 100755
--- a/build/core/qcom_utils.mk
+++ b/build/core/qcom_utils.mk
@@ -32,9 +32,7 @@ QCOM_BOARD_PLATFORMS += msm8996
 QCOM_BOARD_PLATFORMS += msm8998
 
 QCOM_BOARD_PLATFORMS += sdm660
-QCOM_BOARD_PLATFORMS += sdm845
 
-# MSM7000 Family
 MSM7K_BOARD_PLATFORMS := msm7x30
 MSM7K_BOARD_PLATFORMS += msm7x27
 MSM7K_BOARD_PLATFORMS += msm7x27a
diff --git a/build/envsetup.sh b/build/envsetup.sh
index dd0d8630..0f71f6a0 100644
--- a/build/envsetup.sh
+++ b/build/envsetup.sh
@@ -118,14 +118,14 @@ function eat()
             # if adbd isn't root we can't write to /cache/recovery/
             adb root
             sleep 1
-            adb wait-for-device
+            adb wait-\for-device
             cat << EOF > /tmp/command
 --sideload_auto_reboot
 EOF
             if adb push /tmp/command /cache/recovery/ ; then
                 echo "Rebooting into recovery for sideload installation"
                 adb reboot recovery
-                adb wait-for-sideload
+                adb wait-\for-sideload
                 adb sideload $ZIPPATH
             fi
             rm /tmp/command
@@ -348,11 +348,11 @@ function installboot()
         fi
     fi
     adb start-server
-    adb wait-for-online
+    adb wait-\for-online
     adb root
     sleep 1
-    adb wait-for-online shell mount /system 2>&1 > /dev/null
-    adb wait-for-online remount
+    adb wait-\for-online shell mount /system 2>&1 > /dev/null
+    adb wait-\for-online remount
     if (adb shell getprop ro.havoc.device | grep -q "$HAVOC_BUILD");
     then
         adb push $OUT/boot.img /cache/
@@ -397,11 +397,11 @@ function installrecovery()
         fi
     fi
     adb start-server
-    adb wait-for-online
+    adb wait-\for-online
     adb root
     sleep 1
-    adb wait-for-online shell mount /system 2>&1 >> /dev/null
-    adb wait-for-online remount
+    adb wait-\for-online shell mount /system 2>&1 >> /dev/null
+    adb wait-\for-online remount
     if (adb shell getprop ro.havoc.device | grep -q "$HAVOC_BUILD");
     then
         adb push $OUT/recovery.img /cache/
@@ -522,7 +522,7 @@ function dopush()
         # so reconnect...
         adb connect "$TCPIPPORT"
     fi
-    adb wait-for-device &> /dev/null
+    adb wait-\for-device &> /dev/null
     sleep 0.3
     adb remount &> /dev/null
 
diff --git a/build/soong/Android.bp b/build/soong/Android.bp
index b9a8cd94..d2482fc0 100644
--- a/build/soong/Android.bp
+++ b/build/soong/Android.bp
@@ -5,3 +5,41 @@ bootstrap_go_package {
         "android/variable.go",
     ],
 }
+
+bootstrap_go_package {
+    name: "soong-havoc-generator",
+    pkgPath: "havoc/soong/generator",
+    deps: [
+        "blueprint",
+        "blueprint-pathtools",
+        "soong",
+        "soong-android",
+        "soong-shared",
+    ],
+    srcs: [
+        "generator/generator.go",
+        "generator/variables.go",
+    ],
+    pluginFor: ["soong_build"],
+}
+
+havoc_generator {
+    name: "generated_kernel_includes",
+
+    // The headers make command
+    cmd: "make $(KERNEL_MAKE_FLAGS) -C $(TARGET_KERNEL_SOURCE) O=$(genDir) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_CLANG_TRIPLE) $(KERNEL_CC) headers_install",
+
+    // Directories that can be imported by a cc_* module generated_headers property
+    export_include_dirs: ["usr/include"],
+
+    // Sources for dependency tracking
+    dep_root: "kernel/xiaomi/msm8996",
+    dep_files: [ "Makefile", "include/**/*", "arch/$(KERNEL_ARCH)/include/**/*"],
+}
+
+cc_library_headers {
+    name: "generated_kernel_headers",
+    generated_headers: ["generated_kernel_includes"],
+    export_generated_headers: ["generated_kernel_includes"],
+    vendor_available: true,
+}
diff --git a/build/soong/generator/generator.go b/build/soong/generator/generator.go
new file mode 100644
index 00000000..43dc574d
--- /dev/null
+++ b/build/soong/generator/generator.go
@@ -0,0 +1,310 @@
+// Copyright 2015 Google Inc. All rights reserved.
+// Copyright (C) 2018 The LineageOS Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package generator
+
+import (
+	"fmt"
+	"strings"
+
+	"github.com/google/blueprint"
+	"github.com/google/blueprint/bootstrap"
+	"github.com/google/blueprint/proptools"
+
+	"android/soong/android"
+	"android/soong/shared"
+	"path/filepath"
+)
+
+func init() {
+	android.RegisterModuleType("havoc_generator", GeneratorFactory)
+
+	pctx.HostBinToolVariable("sboxCmd", "sbox")
+}
+
+var String = proptools.String
+
+var (
+	pctx = android.NewPackageContext("android/soong/generator")
+)
+
+type HostToolProvider interface {
+	HostToolPath() android.OptionalPath
+}
+
+type hostToolDependencyTag struct {
+	blueprint.BaseDependencyTag
+}
+
+var hostToolDepTag hostToolDependencyTag
+
+type generatorProperties struct {
+	// The command to run on one or more input files. Cmd supports substitution of a few variables
+	// (the actual substitution is implemented in GenerateAndroidBuildActions below)
+	//
+	// Available variables for substitution:
+	//
+	//  $(location): the path to the first entry in tools or tool_files
+	//  $(location <label>): the path to the tool or tool_file with name <label>
+	//  $(genDir): the sandbox directory for this tool; contains $(out)
+	//  $$: a literal $
+	//
+	Cmd *string
+
+	// name of the modules (if any) that produces the host executable.   Leave empty for
+	// prebuilts or scripts that do not need a module to build them.
+	Tools []string
+
+	// Local file that is used as the tool
+	Tool_files []string
+
+	// List of directories to export as headers
+	Export_include_dirs []string
+
+	// List of directories to export as sources
+	Export_source_dirs []string
+
+	// Root directory for dep_files.
+	// Relative to top build dir.
+	Dep_root *string
+
+	// Declare list of files that should be used for timestamp dependency checking
+	Dep_files []string
+}
+
+type Module struct {
+	android.ModuleBase
+
+	properties generatorProperties
+
+	rule blueprint.Rule
+
+	// Tool dependencies
+	implicitDeps android.Paths
+	// Deps from input files declared in dep_files property.
+	inputDeps android.Paths
+
+	exportedIncludeDirs android.Paths
+	exportedSourceDirs  android.Paths
+
+	outputDeps android.Paths
+}
+
+// These three methods satisfy genrule.SourceFileGenerator.
+// Which cc modules check for when including headers etc.
+func (g *Module) GeneratedHeaderDirs() android.Paths {
+	return g.exportedIncludeDirs
+}
+
+func (g *Module) GeneratedSourceFiles() android.Paths {
+	return g.exportedSourceDirs
+}
+
+func (g *Module) GeneratedDeps() android.Paths {
+	return g.outputDeps
+}
+
+func (g *Module) DepsMutator(ctx android.BottomUpMutatorContext) {
+	android.ExtractSourcesDeps(ctx, g.properties.Dep_files)
+	android.ExtractSourcesDeps(ctx, g.properties.Tool_files)
+	if g, ok := ctx.Module().(*Module); ok {
+		if len(g.properties.Tools) > 0 {
+			ctx.AddFarVariationDependencies([]blueprint.Variation{
+				{"arch", ctx.Config().BuildOsVariant},
+			}, hostToolDepTag, g.properties.Tools...)
+		}
+	}
+}
+
+func (g *Module) GenerateAndroidBuildActions(ctx android.ModuleContext) {
+	if len(g.properties.Export_include_dirs) > 0 {
+		for _, dir := range g.properties.Export_include_dirs {
+			g.exportedIncludeDirs = append(g.exportedIncludeDirs,
+				android.PathForModuleGen(ctx, dir))
+		}
+	} else {
+		g.exportedIncludeDirs = append(g.exportedIncludeDirs, android.PathForModuleGen(ctx, ""))
+	}
+	if len(g.properties.Export_source_dirs) > 0 {
+		for _, dir := range g.properties.Export_source_dirs {
+			g.exportedSourceDirs = append(g.exportedSourceDirs,
+				android.PathForModuleGen(ctx, dir))
+		}
+	} else {
+		g.exportedSourceDirs = append(g.exportedSourceDirs, android.PathForModuleGen(ctx, ""))
+	}
+
+	tools := map[string]android.Path{}
+
+	if len(g.properties.Tools) > 0 {
+		ctx.VisitDirectDepsBlueprint(func(module blueprint.Module) {
+			switch ctx.OtherModuleDependencyTag(module) {
+			case android.SourceDepTag:
+				// Nothing to do
+			case hostToolDepTag:
+				tool := ctx.OtherModuleName(module)
+				var path android.OptionalPath
+
+				if t, ok := module.(HostToolProvider); ok {
+					if !t.(android.Module).Enabled() {
+						if ctx.Config().AllowMissingDependencies() {
+							ctx.AddMissingDependencies([]string{tool})
+						} else {
+							ctx.ModuleErrorf("depends on disabled module %q", tool)
+						}
+						break
+					}
+					path = t.HostToolPath()
+				} else if t, ok := module.(bootstrap.GoBinaryTool); ok {
+					if s, err := filepath.Rel(android.PathForOutput(ctx).String(), t.InstallPath()); err == nil {
+						path = android.OptionalPathForPath(android.PathForOutput(ctx, s))
+					} else {
+						ctx.ModuleErrorf("cannot find path for %q: %v", tool, err)
+						break
+					}
+				} else {
+					ctx.ModuleErrorf("%q is not a host tool provider", tool)
+					break
+				}
+
+				if path.Valid() {
+					g.implicitDeps = append(g.implicitDeps, path.Path())
+					if _, exists := tools[tool]; !exists {
+						tools[tool] = path.Path()
+					} else {
+						ctx.ModuleErrorf("multiple tools for %q, %q and %q", tool, tools[tool], path.Path().String())
+					}
+				} else {
+					ctx.ModuleErrorf("host tool %q missing output file", tool)
+				}
+			default:
+				ctx.ModuleErrorf("unknown dependency on %q", ctx.OtherModuleName(module))
+			}
+		})
+	}
+
+	if ctx.Failed() {
+		return
+	}
+
+	toolFiles := ctx.ExpandSources(g.properties.Tool_files, nil)
+	for _, tool := range toolFiles {
+		g.implicitDeps = append(g.implicitDeps, tool)
+		if _, exists := tools[tool.Rel()]; !exists {
+			tools[tool.Rel()] = tool
+		} else {
+			ctx.ModuleErrorf("multiple tools for %q, %q and %q", tool, tools[tool.Rel()], tool.Rel())
+		}
+	}
+
+	// Determine root dir for dep_files.  Defaults to current ctx ModuleDir.
+	depRoot := String(g.properties.Dep_root)
+	if depRoot == "" {
+		depRoot = ctx.ModuleDir()
+	} else {
+		depRoot = havocExpandVariables(ctx, depRoot)
+	}
+
+	// Glob dep_files property
+	for _, dep_file := range g.properties.Dep_files {
+		dep_file = havocExpandVariables(ctx, dep_file)
+		globPath := filepath.Join(depRoot, dep_file)
+		paths, err := ctx.GlobWithDeps(globPath, nil)
+		if err != nil {
+			ctx.ModuleErrorf("unable to glob %s: %s", globPath, err.Error())
+			return
+		}
+		for _, path := range paths {
+			g.inputDeps = append(g.inputDeps, android.PathForSourceRelaxed(ctx, path))
+		}
+	}
+
+	cmd := havocExpandVariables(ctx, String(g.properties.Cmd))
+
+	rawCommand, err := android.Expand(cmd, func(name string) (string, error) {
+		switch name {
+		case "location":
+			if len(g.properties.Tools) == 0 && len(toolFiles) == 0 {
+				return "", fmt.Errorf("at least one `tools` or `tool_files` is required if $(location) is used")
+			}
+
+			if len(g.properties.Tools) > 0 {
+				return tools[g.properties.Tools[0]].String(), nil
+			} else {
+				return tools[toolFiles[0].Rel()].String(), nil
+			}
+		case "genDir":
+			return "__SBOX_OUT_DIR__", nil
+		default:
+			if strings.HasPrefix(name, "location ") {
+				label := strings.TrimSpace(strings.TrimPrefix(name, "location "))
+				if tool, ok := tools[label]; ok {
+					return tool.String(), nil
+				} else {
+					return "", fmt.Errorf("unknown location label %q", label)
+				}
+			}
+			return "", fmt.Errorf("unknown variable '$(%s)'", name)
+		}
+	})
+
+	if err != nil {
+		ctx.PropertyErrorf("cmd", "%s", err.Error())
+		return
+	}
+
+	// Dummy output dep
+	dummyDep := android.PathForModuleGen(ctx, ".dummy_dep")
+
+	// tell the sbox command which directory to use as its sandbox root
+	buildDir := android.PathForOutput(ctx).String()
+	sandboxPath := shared.TempDirForOutDir(buildDir)
+
+	genDir := android.PathForModuleGen(ctx)
+	// Escape the command for the shell
+	rawCommand = "'" + strings.Replace(rawCommand, "'", `'\''`, -1) + "'"
+	sandboxCommand := fmt.Sprintf("$sboxCmd --sandbox-path %s --output-root %s --copy-all-output -c %s && touch %s",
+		sandboxPath, genDir, rawCommand, dummyDep.String())
+
+	ruleParams := blueprint.RuleParams{
+		Command:     sandboxCommand,
+		CommandDeps: []string{"$sboxCmd"},
+	}
+	g.rule = ctx.Rule(pctx, "generator", ruleParams)
+
+	params := android.BuildParams{
+		Rule:        g.rule,
+		Description: "generate",
+		Output:      dummyDep,
+		Inputs:      g.inputDeps,
+		Implicits:   g.implicitDeps,
+	}
+
+	g.outputDeps = append(g.outputDeps, dummyDep)
+
+	ctx.Build(pctx, params)
+}
+
+func NewGenerator() *Module {
+	module := &Module{}
+	module.AddProperties(&module.properties)
+	return module
+}
+
+func GeneratorFactory() android.Module {
+	m := NewGenerator()
+	android.InitAndroidModule(m)
+	return m
+}
diff --git a/build/soong/generator/variables.go b/build/soong/generator/variables.go
new file mode 100644
index 00000000..cd3c04e6
--- /dev/null
+++ b/build/soong/generator/variables.go
@@ -0,0 +1,28 @@
+package generator
+
+import (
+	"fmt"
+
+	"android/soong/android"
+)
+
+func havocExpandVariables(ctx android.ModuleContext, in string) string {
+	havocVars := ctx.Config().VendorConfig("havocVarsPlugin")
+
+	out, err := android.Expand(in, func(name string) (string, error) {
+		if havocVars.IsSet(name) {
+			return havocVars.String(name), nil
+		}
+		// This variable is not for us, restore what the original
+		// variable string will have looked like for an Expand
+		// that comes later.
+		return fmt.Sprintf("$(%s)", name), nil
+	})
+
+	if err != nil {
+		ctx.PropertyErrorf("%s: %s", in, err.Error())
+		return ""
+	}
+
+	return out
+}
diff --git a/build/tasks/kernel.mk b/build/tasks/kernel.mk
index 3555d256..e6288e9c 100644
--- a/build/tasks/kernel.mk
+++ b/build/tasks/kernel.mk
@@ -113,7 +113,7 @@ endif
 TARGET_PREBUILT_INT_KERNEL := $(KERNEL_OUT)/arch/$(KERNEL_ARCH)/boot/$(BOARD_KERNEL_IMAGE_NAME)
 
 # Clear this first to prevent accidental poisoning from env
-MAKE_FLAGS :=
+MAKE_FLAGS := -j4
 
 ifeq ($(KERNEL_ARCH),arm)
   # Avoid "Unknown symbol _GLOBAL_OFFSET_TABLE_" errors
diff --git a/config/BoardConfigHavoc.mk b/config/BoardConfigHavoc.mk
index 33be6de4..1030d135 100644
--- a/config/BoardConfigHavoc.mk
+++ b/config/BoardConfigHavoc.mk
@@ -4,5 +4,5 @@ ifeq ($(WITH_HAVOC_CHARGER),true)
 endif
 
 ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-include vendor/havoc/config/BoardConfigQcom.mk
+#include vendor/havoc/config/BoardConfigQcom.mk
 endif
diff --git a/config/BoardConfigQcom.mk b/config/BoardConfigQcom.mk
index 5ad806a2..27e77095 100644
--- a/config/BoardConfigQcom.mk
+++ b/config/BoardConfigQcom.mk
@@ -6,46 +6,31 @@ B64_FAMILY := msm8992 msm8994
 BR_FAMILY := msm8909 msm8916
 UM_3_18_FAMILY := msm8937 msm8953 msm8996
 UM_4_4_FAMILY := msm8998 sdm660
-UM_4_9_FAMILY := sdm845
-UM_PLATFORMS := $(UM_3_18_FAMILY) $(UM_4_4_FAMILY) $(UM_4_9_FAMILY)
 
 BOARD_USES_ADRENO := true
 
-# UM platforms no longer need this set on O+
-ifneq ($(call is-board-platform-in-list, $(UM_PLATFORMS)),true)
-    TARGET_USES_QCOM_BSP := true
-endif
+#TARGET_USES_QCOM_BSP := true
 
 # Tell HALs that we're compiling an AOSP build with an in-line kernel
 TARGET_COMPILE_WITH_MSM_KERNEL := true
 
 ifneq ($(filter msm7x27a msm7x30 msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
-    TARGET_USES_QCOM_BSP_LEGACY := true
     # Enable legacy audio functions
     ifeq ($(BOARD_USES_LEGACY_ALSA_AUDIO),true)
         USE_CUSTOM_AUDIO_POLICY := 1
     endif
 endif
 
-# Enable media extensions
-TARGET_USES_MEDIA_EXTENSIONS := true
-
 # Allow building audio encoders
 TARGET_USES_QCOM_MM_AUDIO := true
 
-# Enable color metadata for every UM platform
-ifeq ($(call is-board-platform-in-list, $(UM_PLATFORMS)),true)
+# Enable color metadata for UM platforms
+ifeq ($(call is-board-platform-in-list, $(UM_3_18_FAMILY) $(UM_4_4_FAMILY)),true)
     TARGET_USES_COLOR_METADATA := true
 endif
 
-# Enable DRM PP driver on UM platforms that support it
-ifeq ($(call is-board-platform-in-list, $(UM_4_9_FAMILY)),true)
-    TARGET_USES_DRM_PP := true
-endif
-
 # List of targets that use master side content protection
-MASTER_SIDE_CP_TARGET_LIST := msm8996 msm8998 sdm660 sdm845
-
+MASTER_SIDE_CP_TARGET_LIST := msm8996 msm8998 sdm660
 ifeq ($(call is-board-platform-in-list, $(B_FAMILY)),true)
     MSM_VIDC_TARGET_LIST := $(B_FAMILY)
     QCOM_HARDWARE_VARIANT := msm8974
@@ -65,10 +50,6 @@ else
 ifeq ($(call is-board-platform-in-list, $(UM_4_4_FAMILY)),true)
     MSM_VIDC_TARGET_LIST := $(UM_4_4_FAMILY)
     QCOM_HARDWARE_VARIANT := msm8998
-else
-ifeq ($(call is-board-platform-in-list, $(UM_4_9_FAMILY)),true)
-    MSM_VIDC_TARGET_LIST := $(UM_4_9_FAMILY)
-    QCOM_HARDWARE_VARIANT := sdm845
 else
     MSM_VIDC_TARGET_LIST := $(TARGET_BOARD_PLATFORM)
     QCOM_HARDWARE_VARIANT := $(TARGET_BOARD_PLATFORM)
@@ -77,14 +58,8 @@ endif
 endif
 endif
 endif
-endif
 
 PRODUCT_SOONG_NAMESPACES += \
-    hardware/qcom/audio-caf/$(QCOM_HARDWARE_VARIANT) \
-    hardware/qcom/display-caf/$(QCOM_HARDWARE_VARIANT) \
-    hardware/qcom/media-caf/$(QCOM_HARDWARE_VARIANT)
-
-# QCOM HW crypto
-ifeq ($(TARGET_HW_DISK_ENCRYPTION),true)
-    TARGET_CRYPTFS_HW_PATH ?= vendor/qcom/opensource/cryptfs_hw
-endif
+  hardware/qcom/audio-caf/$(QCOM_HARDWARE_VARIANT) \
+  hardware/qcom/display-caf/$(QCOM_HARDWARE_VARIANT) \
+  hardware/qcom/media-caf/$(QCOM_HARDWARE_VARIANT)
diff --git a/config/common.mk b/config/common.mk
index b59d2c4f..7fed6c70 100644
--- a/config/common.mk
+++ b/config/common.mk
@@ -286,7 +286,7 @@ PRODUCT_ENFORCE_RRO_EXCLUDED_OVERLAYS += vendor/havoc/overlay
 DEVICE_PACKAGE_OVERLAYS += vendor/havoc/overlay/common
 
 # Bootanimation
-include vendor/havoc/config/bootanimation.mk
+#include vendor/havoc/config/bootanimation.mk
 
 # Version
 include vendor/havoc/config/version.mk
diff --git a/config/version.mk b/config/version.mk
index d5c205a7..56d480c7 100644
--- a/config/version.mk
+++ b/config/version.mk
@@ -22,7 +22,6 @@ HAVOC_MOD_VERSION := Havoc-OS-$(HAVOC_BASE_VERSION)-$(HAVOC_BUILD_DATE)-$(HAVOC_
 ROM_FINGERPRINT := Havoc-OS/$(HAVOC_BASE_VERSION)/$(PLATFORM_VERSION)/$(TARGET_PRODUCT_SHORT)/$(HAVOC_BUILD_DATE)
 
 PRODUCT_PROPERTY_OVERRIDES += \
-    BUILD_DISPLAY_ID=$(BUILD_ID) \
     ro.havoc.build.version=$(HAVOC_BUILD_VERSION) \
     ro.havoc.version=$(HAVOC_VERSION) \
     ro.havoc.releasetype=$(HAVOC_BUILD_TYPE) \
-- 
2.19.1

